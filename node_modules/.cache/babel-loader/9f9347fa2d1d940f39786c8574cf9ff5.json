{"ast":null,"code":"import { noop, elapsed, round, timeStampNow, ONE_SECOND } from '@datadog/browser-core';\nimport { supportPerformanceTimingEvent } from '../../../browser/performanceCollection';\nimport { ViewLoadingType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { trackEventCounts } from '../../trackEventCounts';\nimport { waitIdlePageActivity } from '../../trackPageActivities';\nexport function trackViewMetrics(lifeCycle, domMutationObservable, scheduleViewUpdate, loadingType, configuration) {\n  var viewMetrics = {\n    eventCounts: {\n      errorCount: 0,\n      longTaskCount: 0,\n      resourceCount: 0,\n      userActionCount: 0\n    }\n  };\n  var stopEventCountsTracking = trackEventCounts(lifeCycle, function (newEventCounts) {\n    viewMetrics.eventCounts = newEventCounts;\n    scheduleViewUpdate();\n  }).stop;\n\n  var _a = trackLoadingTime(loadingType, function (newLoadingTime) {\n    viewMetrics.loadingTime = newLoadingTime;\n    scheduleViewUpdate();\n  }),\n      setActivityLoadingTime = _a.setActivityLoadingTime,\n      setLoadEvent = _a.setLoadEvent;\n\n  var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, domMutationObservable, configuration, setActivityLoadingTime).stop;\n  var stopCLSTracking;\n\n  if (isLayoutShiftSupported()) {\n    viewMetrics.cumulativeLayoutShift = 0;\n    stopCLSTracking = trackCumulativeLayoutShift(lifeCycle, function (cumulativeLayoutShift) {\n      viewMetrics.cumulativeLayoutShift = cumulativeLayoutShift;\n      scheduleViewUpdate();\n    }).stop;\n  } else {\n    stopCLSTracking = noop;\n  }\n\n  return {\n    stop: function stop() {\n      stopEventCountsTracking();\n      stopActivityLoadingTimeTracking();\n      stopCLSTracking();\n    },\n    setLoadEvent: setLoadEvent,\n    viewMetrics: viewMetrics\n  };\n}\n\nfunction trackLoadingTime(loadType, callback) {\n  var isWaitingForLoadEvent = loadType === ViewLoadingType.INITIAL_LOAD;\n  var isWaitingForActivityLoadingTime = true;\n  var loadingTimeCandidates = [];\n\n  function invokeCallbackIfAllCandidatesAreReceived() {\n    if (!isWaitingForActivityLoadingTime && !isWaitingForLoadEvent && loadingTimeCandidates.length > 0) {\n      callback(Math.max.apply(Math, loadingTimeCandidates));\n    }\n  }\n\n  return {\n    setLoadEvent: function setLoadEvent(loadEvent) {\n      if (isWaitingForLoadEvent) {\n        isWaitingForLoadEvent = false;\n        loadingTimeCandidates.push(loadEvent);\n        invokeCallbackIfAllCandidatesAreReceived();\n      }\n    },\n    setActivityLoadingTime: function setActivityLoadingTime(activityLoadingTime) {\n      if (isWaitingForActivityLoadingTime) {\n        isWaitingForActivityLoadingTime = false;\n\n        if (activityLoadingTime !== undefined) {\n          loadingTimeCandidates.push(activityLoadingTime);\n        }\n\n        invokeCallbackIfAllCandidatesAreReceived();\n      }\n    }\n  };\n}\n\nfunction trackActivityLoadingTime(lifeCycle, domMutationObservable, configuration, callback) {\n  var startTime = timeStampNow();\n  var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, domMutationObservable, configuration, function (params) {\n    if (params.hadActivity) {\n      callback(elapsed(startTime, params.endTime));\n    } else {\n      callback(undefined);\n    }\n  }).stop;\n  return {\n    stop: stopWaitIdlePageActivity\n  };\n}\n/**\n * Track the cumulative layout shifts (CLS).\n * Layout shifts are grouped into session windows.\n * The minimum gap between session windows is 1 second.\n * The maximum duration of a session window is 5 second.\n * The session window layout shift value is the sum of layout shifts inside it.\n * The CLS value is the max of session windows values.\n *\n * This yields a new value whenever the CLS value is updated (a higher session window value is computed).\n *\n * See isLayoutShiftSupported to check for browser support.\n *\n * Documentation:\n * https://web.dev/cls/\n * https://web.dev/evolving-cls/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getCLS.ts\n */\n\n\nfunction trackCumulativeLayoutShift(lifeCycle, callback) {\n  var maxClsValue = 0;\n  var window = slidingSessionWindow();\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'layout-shift' && !entry.hadRecentInput) {\n      window.update(entry);\n\n      if (window.value() > maxClsValue) {\n        maxClsValue = window.value();\n        callback(round(maxClsValue, 4));\n      }\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\n\nfunction slidingSessionWindow() {\n  var _value = 0;\n  var startTime;\n  var endTime;\n  return {\n    update: function update(entry) {\n      var shouldCreateNewWindow = startTime === undefined || entry.startTime - endTime >= ONE_SECOND || entry.startTime - startTime >= 5 * ONE_SECOND;\n\n      if (shouldCreateNewWindow) {\n        startTime = endTime = entry.startTime;\n        _value = entry.value;\n      } else {\n        _value += entry.value;\n        endTime = entry.startTime;\n      }\n    },\n    value: function value() {\n      return _value;\n    }\n  };\n}\n/**\n * Check whether `layout-shift` is supported by the browser.\n */\n\n\nfunction isLayoutShiftSupported() {\n  return supportPerformanceTimingEvent('layout-shift');\n}","map":{"version":3,"mappings":"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","names":["noop","elapsed","round","timeStampNow","ONE_SECOND","supportPerformanceTimingEvent","ViewLoadingType","LifeCycleEventType","trackEventCounts","waitIdlePageActivity","trackViewMetrics","lifeCycle","domMutationObservable","scheduleViewUpdate","loadingType","configuration","viewMetrics","eventCounts","errorCount","longTaskCount","resourceCount","userActionCount","stopEventCountsTracking","newEventCounts","stop","trackLoadingTime","newLoadingTime","loadingTime","setActivityLoadingTime","setLoadEvent","stopActivityLoadingTimeTracking","trackActivityLoadingTime","stopCLSTracking","isLayoutShiftSupported","cumulativeLayoutShift","trackCumulativeLayoutShift","loadType","callback","isWaitingForLoadEvent","INITIAL_LOAD","isWaitingForActivityLoadingTime","loadingTimeCandidates","invokeCallbackIfAllCandidatesAreReceived","length","Math","max","apply","loadEvent","push","activityLoadingTime","undefined","startTime","stopWaitIdlePageActivity","params","hadActivity","endTime","maxClsValue","window","slidingSessionWindow","subscribe","PERFORMANCE_ENTRY_COLLECTED","entry","entryType","hadRecentInput","update","value","unsubscribe","shouldCreateNewWindow"],"sourceRoot":"","sources":["../../../../src/domain/rumEventsCollection/view/trackViewMetrics.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}