{"ast":null,"code":"import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, isPercentage, makePublicApi, monitor, clocksNow, timeStampNow, display, commonInit, callMonitored, createHandlingStack } from '@datadog/browser-core';\nimport { ActionType } from '../rawRumEvent.types';\nimport { buildEnv } from './buildEnv';\nexport function makeRumPublicApi(startRumImpl, recorderApi) {\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var user = {};\n\n  var getInternalContextStrategy = function getInternalContextStrategy() {\n    return undefined;\n  };\n\n  var getInitConfigurationStrategy = function getInitConfigurationStrategy() {\n    return undefined;\n  };\n\n  var bufferApiCalls = new BoundedBuffer();\n\n  var _addTimingStrategy = function addTimingStrategy(name, time) {\n    if (time === void 0) {\n      time = timeStampNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addTimingStrategy(name, time);\n    });\n  };\n\n  var _startViewStrategy = function startViewStrategy(name, startClocks) {\n    if (startClocks === void 0) {\n      startClocks = clocksNow();\n    }\n\n    bufferApiCalls.add(function () {\n      return _startViewStrategy(name, startClocks);\n    });\n  };\n\n  var _addActionStrategy = function addActionStrategy(action, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addActionStrategy(action, commonContext);\n    });\n  };\n\n  var _addErrorStrategy = function addErrorStrategy(providedError, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = clonedCommonContext();\n    }\n\n    bufferApiCalls.add(function () {\n      return _addErrorStrategy(providedError, commonContext);\n    });\n  };\n\n  function clonedCommonContext() {\n    return deepClone({\n      context: globalContextManager.get(),\n      user: user\n    });\n  }\n\n  function initRum(initConfiguration) {\n    if (!checkCookiesAuthorized(buildCookieOptions(initConfiguration)) || !checkIsNotLocalFile() || !canInitRum(initConfiguration)) {\n      return;\n    }\n\n    var _a = commonInit(initConfiguration, buildEnv),\n        configuration = _a.configuration,\n        internalMonitoring = _a.internalMonitoring;\n\n    if (!configuration.trackViewsManually) {\n      doStartRum(initConfiguration, configuration, internalMonitoring);\n    } else {\n      // drain beforeInitCalls by buffering them until we start RUM\n      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n      // in order to ensure that calls are processed in order\n      var beforeInitCalls = bufferApiCalls;\n      bufferApiCalls = new BoundedBuffer();\n\n      _startViewStrategy = function _startViewStrategy(name) {\n        doStartRum(initConfiguration, configuration, internalMonitoring, name);\n      };\n\n      beforeInitCalls.drain();\n    }\n\n    getInitConfigurationStrategy = function getInitConfigurationStrategy() {\n      return deepClone(initConfiguration);\n    };\n\n    isAlreadyInitialized = true;\n  }\n\n  function doStartRum(initConfiguration, configuration, internalMonitoring, initialViewName) {\n    var startRumResults = startRumImpl(initConfiguration, configuration, internalMonitoring, function () {\n      return {\n        user: user,\n        context: globalContextManager.get(),\n        hasReplay: recorderApi.isRecording() ? true : undefined\n      };\n    }, recorderApi, initialViewName);\n    _startViewStrategy = startRumResults.startView, _addActionStrategy = startRumResults.addAction, _addErrorStrategy = startRumResults.addError, _addTimingStrategy = startRumResults.addTiming, getInternalContextStrategy = startRumResults.getInternalContext;\n    bufferApiCalls.drain();\n    recorderApi.onRumStart(startRumResults.lifeCycle, initConfiguration, configuration, startRumResults.session, startRumResults.parentContexts);\n  }\n\n  var rumPublicApi = makePublicApi({\n    init: monitor(initRum),\n    addRumGlobalContext: monitor(globalContextManager.add),\n    removeRumGlobalContext: monitor(globalContextManager.remove),\n    getRumGlobalContext: monitor(globalContextManager.get),\n    setRumGlobalContext: monitor(globalContextManager.set),\n    getInternalContext: monitor(function (startTime) {\n      return getInternalContextStrategy(startTime);\n    }),\n    getInitConfiguration: monitor(function () {\n      return getInitConfigurationStrategy();\n    }),\n    addAction: monitor(function (name, context) {\n      _addActionStrategy({\n        name: name,\n        context: deepClone(context),\n        startClocks: clocksNow(),\n        type: ActionType.CUSTOM\n      });\n    }),\n    addError: function addError(error, context) {\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        _addErrorStrategy({\n          error: error,\n          handlingStack: handlingStack,\n          context: deepClone(context),\n          startClocks: clocksNow()\n        });\n      });\n    },\n    addTiming: monitor(function (name) {\n      _addTimingStrategy(name);\n    }),\n    setUser: monitor(function (newUser) {\n      var sanitizedUser = sanitizeUser(newUser);\n\n      if (sanitizedUser) {\n        user = sanitizedUser;\n      } else {\n        display.error('Unsupported user:', newUser);\n      }\n    }),\n    removeUser: monitor(function () {\n      user = {};\n    }),\n    startView: monitor(function (name) {\n      _startViewStrategy(name);\n    }),\n    startSessionReplayRecording: monitor(recorderApi.start),\n    stopSessionReplayRecording: monitor(recorderApi.stop)\n  });\n  return rumPublicApi;\n\n  function sanitizeUser(newUser) {\n    if (typeof newUser !== 'object' || !newUser) {\n      return;\n    }\n\n    var result = deepClone(newUser);\n\n    if ('id' in result) {\n      result.id = String(result.id);\n    }\n\n    if ('name' in result) {\n      result.name = String(result.name);\n    }\n\n    if ('email' in result) {\n      result.email = String(result.email);\n    }\n\n    return result;\n  }\n\n  function canInitRum(initConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!initConfiguration.silentMultipleInit) {\n        display.error('DD_RUM is already initialized.');\n      }\n\n      return false;\n    }\n\n    if (!initConfiguration || !initConfiguration.clientToken) {\n      display.error('Client Token is not configured, we will not send any data.');\n      return false;\n    }\n\n    if (!initConfiguration.applicationId) {\n      display.error('Application ID is not configured, no RUM data will be collected.');\n      return false;\n    }\n\n    if (initConfiguration.sampleRate !== undefined && !isPercentage(initConfiguration.sampleRate)) {\n      display.error('Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (initConfiguration.replaySampleRate !== undefined && !isPercentage(initConfiguration.replaySampleRate)) {\n      display.error('Replay Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    if (Array.isArray(initConfiguration.allowedTracingOrigins) && initConfiguration.allowedTracingOrigins.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service need to be configured when tracing is enabled');\n      return false;\n    }\n\n    return true;\n  }\n}","map":{"version":3,"mappings":"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","names":["BoundedBuffer","buildCookieOptions","checkCookiesAuthorized","checkIsNotLocalFile","createContextManager","deepClone","isPercentage","makePublicApi","monitor","clocksNow","timeStampNow","display","commonInit","callMonitored","createHandlingStack","ActionType","buildEnv","makeRumPublicApi","startRumImpl","recorderApi","isAlreadyInitialized","globalContextManager","user","getInternalContextStrategy","getInitConfigurationStrategy","bufferApiCalls","addTimingStrategy","name","time","add","startViewStrategy","startClocks","addActionStrategy","action","commonContext","clonedCommonContext","addErrorStrategy","providedError","context","get","initRum","initConfiguration","canInitRum","configuration","internalMonitoring","trackViewsManually","doStartRum","beforeInitCalls","drain","initialViewName","startRumResults","hasReplay","isRecording","undefined","onRumStart","lifeCycle","session","parentContexts","rumPublicApi","init","addRumGlobalContext","removeRumGlobalContext","remove","getRumGlobalContext","setRumGlobalContext","set","getInternalContext","startTime","getInitConfiguration","addAction","type","CUSTOM","addError","error","handlingStack","addTiming","setUser","newUser","sanitizedUser","sanitizeUser","removeUser","startView","startSessionReplayRecording","start","stopSessionReplayRecording","stop","result","id","String","email","silentMultipleInit","clientToken","applicationId","sampleRate","replaySampleRate","Array","isArray","allowedTracingOrigins","length","service"],"sourceRoot":"","sources":["../../src/boot/rumPublicApi.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}