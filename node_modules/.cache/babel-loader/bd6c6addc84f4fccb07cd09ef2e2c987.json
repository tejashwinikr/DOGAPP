{"ast":null,"code":"import { NodePrivacyLevel, PRIVACY_ATTR_NAME, PRIVACY_ATTR_VALUE_ALLOW, PRIVACY_ATTR_VALUE_MASK, PRIVACY_ATTR_VALUE_MASK_FORMS_ONLY, PRIVACY_ATTR_VALUE_HIDDEN, PRIVACY_CLASS_ALLOW, PRIVACY_CLASS_MASK, PRIVACY_CLASS_MASK_FORMS_ONLY, PRIVACY_CLASS_HIDDEN, FORM_PRIVATE_TAG_NAMES, CENSORED_STRING_MARK, // Deprecated (now aliased) below\nPRIVACY_CLASS_INPUT_IGNORED, PRIVACY_CLASS_INPUT_MASKED, PRIVACY_ATTR_VALUE_INPUT_IGNORED, PRIVACY_ATTR_VALUE_INPUT_MASKED } from '../../constants';\nexport var MAX_ATTRIBUTE_VALUE_CHAR_LENGTH = 100000;\nimport { makeStylesheetUrlsAbsolute } from './serializationUtils';\nimport { shouldIgnoreElement } from './serialize';\nvar TEXT_MASKING_CHAR = 'á™®';\n/**\n * Get node privacy level by iterating over its ancestors. When the direct parent privacy level is\n * know, it is best to use something like:\n *\n * derivePrivacyLevelGivenParent(getNodeSelfPrivacyLevel(node), parentNodePrivacyLevel)\n */\n\nexport function getNodePrivacyLevel(node, initialPrivacyLevel) {\n  var parentNodePrivacyLevel = node.parentNode ? getNodePrivacyLevel(node.parentNode, initialPrivacyLevel) : initialPrivacyLevel;\n  var selfNodePrivacyLevel = getNodeSelfPrivacyLevel(node);\n  return reducePrivacyLevel(selfNodePrivacyLevel, parentNodePrivacyLevel);\n}\n/**\n * Reduces the next privacy level based on self + parent privacy levels\n */\n\nexport function reducePrivacyLevel(childPrivacyLevel, parentNodePrivacyLevel) {\n  switch (parentNodePrivacyLevel) {\n    // These values cannot be overridden\n    case NodePrivacyLevel.HIDDEN:\n    case NodePrivacyLevel.IGNORE:\n      return parentNodePrivacyLevel;\n  }\n\n  switch (childPrivacyLevel) {\n    case NodePrivacyLevel.ALLOW:\n    case NodePrivacyLevel.MASK:\n    case NodePrivacyLevel.MASK_FORMS_ONLY:\n    case NodePrivacyLevel.HIDDEN:\n    case NodePrivacyLevel.IGNORE:\n      return childPrivacyLevel;\n\n    default:\n      return parentNodePrivacyLevel;\n  }\n}\n/**\n * Determines the node's own privacy level without checking for ancestors.\n */\n\nexport function getNodeSelfPrivacyLevel(node) {\n  // Only Element types can be have a privacy level set\n  if (!isElement(node)) {\n    return;\n  }\n\n  var privAttr = node.getAttribute(PRIVACY_ATTR_NAME); // Overrules to enforce end-user protection\n\n  if (node.tagName === 'BASE') {\n    return NodePrivacyLevel.ALLOW;\n  }\n\n  if (node.tagName === 'INPUT') {\n    var inputElement = node;\n\n    if (inputElement.type === 'password' || inputElement.type === 'email' || inputElement.type === 'tel') {\n      return NodePrivacyLevel.MASK;\n    }\n\n    if (inputElement.type === 'hidden') {\n      return NodePrivacyLevel.MASK;\n    }\n\n    var autocomplete = inputElement.getAttribute('autocomplete'); // Handle input[autocomplete=cc-number/cc-csc/cc-exp/cc-exp-month/cc-exp-year]\n\n    if (autocomplete && autocomplete.indexOf('cc-') === 0) {\n      return NodePrivacyLevel.MASK;\n    }\n  } // Check HTML privacy attributes\n\n\n  switch (privAttr) {\n    case PRIVACY_ATTR_VALUE_ALLOW:\n      return NodePrivacyLevel.ALLOW;\n\n    case PRIVACY_ATTR_VALUE_MASK:\n      return NodePrivacyLevel.MASK;\n\n    case PRIVACY_ATTR_VALUE_MASK_FORMS_ONLY:\n    case PRIVACY_ATTR_VALUE_INPUT_IGNORED: // Deprecated, now aliased\n\n    case PRIVACY_ATTR_VALUE_INPUT_MASKED:\n      // Deprecated, now aliased\n      return NodePrivacyLevel.MASK_FORMS_ONLY;\n\n    case PRIVACY_ATTR_VALUE_HIDDEN:\n      return NodePrivacyLevel.HIDDEN;\n  } // Check HTML privacy classes\n\n\n  if (node.classList.contains(PRIVACY_CLASS_ALLOW)) {\n    return NodePrivacyLevel.ALLOW;\n  } else if (node.classList.contains(PRIVACY_CLASS_MASK)) {\n    return NodePrivacyLevel.MASK;\n  } else if (node.classList.contains(PRIVACY_CLASS_HIDDEN)) {\n    return NodePrivacyLevel.HIDDEN;\n  } else if (node.classList.contains(PRIVACY_CLASS_MASK_FORMS_ONLY) || node.classList.contains(PRIVACY_CLASS_INPUT_MASKED) || // Deprecated, now aliased\n  node.classList.contains(PRIVACY_CLASS_INPUT_IGNORED) // Deprecated, now aliased\n  ) {\n    return NodePrivacyLevel.MASK_FORMS_ONLY;\n  } else if (shouldIgnoreElement(node)) {\n    // such as for scripts\n    return NodePrivacyLevel.IGNORE;\n  }\n}\n/**\n * Helper aiming to unify `mask` and `mask-forms-only` privacy levels:\n *\n * In the `mask` case, it is trivial: we should mask the element.\n *\n * In the `mask-forms-only` case, we should mask the element only if it is a \"form\" element or the\n * direct parent is a form element for text nodes).\n *\n * Other `shouldMaskNode` cases are edge cases that should not matter too much (ex: should we mask a\n * node if it is ignored or hidden? it doesn't matter since it won't be serialized).\n */\n\nexport function shouldMaskNode(node, privacyLevel) {\n  switch (privacyLevel) {\n    case NodePrivacyLevel.MASK:\n    case NodePrivacyLevel.HIDDEN:\n    case NodePrivacyLevel.IGNORE:\n      return true;\n\n    case NodePrivacyLevel.MASK_FORMS_ONLY:\n      return isTextNode(node) ? isFormElement(node.parentNode) : isFormElement(node);\n\n    default:\n      return false;\n  }\n}\n\nfunction isElement(node) {\n  return node.nodeType === node.ELEMENT_NODE;\n}\n\nfunction isTextNode(node) {\n  return node.nodeType === node.TEXT_NODE;\n}\n\nfunction isFormElement(node) {\n  if (!node || node.nodeType !== node.ELEMENT_NODE) {\n    return false;\n  }\n\n  var element = node;\n\n  if (element.tagName === 'INPUT') {\n    switch (element.type) {\n      case 'button':\n      case 'color':\n      case 'reset':\n      case 'submit':\n        return false;\n    }\n  }\n\n  return !!FORM_PRIVATE_TAG_NAMES[element.tagName];\n}\n/**\n * Text censoring non-destructively maintains whitespace characters in order to preserve text shape\n * during replay.\n */\n\n\nexport var censorText = function censorText(text) {\n  return text.replace(/\\S/g, TEXT_MASKING_CHAR);\n};\nexport function getTextContent(textNode, ignoreWhiteSpace, parentNodePrivacyLevel) {\n  var _a; // The parent node may not be a html element which has a tagName attribute.\n  // So just let it be undefined which is ok in this use case.\n\n\n  var parentTagName = (_a = textNode.parentElement) === null || _a === void 0 ? void 0 : _a.tagName;\n  var textContent = textNode.textContent || '';\n\n  if (ignoreWhiteSpace && !textContent.trim()) {\n    return;\n  }\n\n  var nodePrivacyLevel = parentNodePrivacyLevel;\n  var isStyle = parentTagName === 'STYLE' ? true : undefined;\n  var isScript = parentTagName === 'SCRIPT';\n\n  if (isScript) {\n    // For perf reasons, we don't record script (heuristic)\n    textContent = CENSORED_STRING_MARK;\n  } else if (nodePrivacyLevel === NodePrivacyLevel.HIDDEN) {\n    // Should never occur, but just in case, we set to CENSORED_MARK.\n    textContent = CENSORED_STRING_MARK;\n  } else if (shouldMaskNode(textNode, nodePrivacyLevel)) {\n    if (isStyle) {\n      // Style tags are `overruled` (Use `hide` to enforce privacy)\n      textContent = makeStylesheetUrlsAbsolute(textContent, location.href);\n    } else if ( // Scrambling the child list breaks text nodes for DATALIST/SELECT/OPTGROUP\n    parentTagName === 'DATALIST' || parentTagName === 'SELECT' || parentTagName === 'OPTGROUP') {\n      if (!textContent.trim()) {\n        return;\n      }\n    } else if (parentTagName === 'OPTION') {\n      // <Option> has low entropy in charset + text length, so use `CENSORED_STRING_MARK` when masked\n      textContent = CENSORED_STRING_MARK;\n    } else {\n      textContent = censorText(textContent);\n    }\n  }\n\n  return textContent;\n}","map":{"version":3,"mappings":"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","names":["NodePrivacyLevel","PRIVACY_ATTR_NAME","PRIVACY_ATTR_VALUE_ALLOW","PRIVACY_ATTR_VALUE_MASK","PRIVACY_ATTR_VALUE_MASK_FORMS_ONLY","PRIVACY_ATTR_VALUE_HIDDEN","PRIVACY_CLASS_ALLOW","PRIVACY_CLASS_MASK","PRIVACY_CLASS_MASK_FORMS_ONLY","PRIVACY_CLASS_HIDDEN","FORM_PRIVATE_TAG_NAMES","CENSORED_STRING_MARK","PRIVACY_CLASS_INPUT_IGNORED","PRIVACY_CLASS_INPUT_MASKED","PRIVACY_ATTR_VALUE_INPUT_IGNORED","PRIVACY_ATTR_VALUE_INPUT_MASKED","MAX_ATTRIBUTE_VALUE_CHAR_LENGTH","makeStylesheetUrlsAbsolute","shouldIgnoreElement","TEXT_MASKING_CHAR","getNodePrivacyLevel","node","initialPrivacyLevel","parentNodePrivacyLevel","parentNode","selfNodePrivacyLevel","getNodeSelfPrivacyLevel","reducePrivacyLevel","childPrivacyLevel","HIDDEN","IGNORE","ALLOW","MASK","MASK_FORMS_ONLY","isElement","privAttr","getAttribute","tagName","inputElement","type","autocomplete","indexOf","classList","contains","shouldMaskNode","privacyLevel","isTextNode","isFormElement","nodeType","ELEMENT_NODE","TEXT_NODE","element","censorText","text","replace","getTextContent","textNode","ignoreWhiteSpace","parentTagName","parentElement","_a","textContent","trim","nodePrivacyLevel","isStyle","undefined","isScript","location","href"],"sourceRoot":"","sources":["../../../src/domain/record/privacy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}