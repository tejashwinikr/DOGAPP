{"ast":null,"code":"import { areCookiesAuthorized, Batch, combine, commonInit, createErrorFilter, HttpRequest, Observable, trackRuntimeError, trackConsoleError } from '@datadog/browser-core';\nimport { trackNetworkError } from '../domain/trackNetworkError';\nimport { StatusType } from '../domain/logger';\nimport { startLoggerSession } from '../domain/loggerSession';\nimport { buildEnv } from './buildEnv';\nexport function startLogs(initConfiguration, errorLogger, getGlobalContext) {\n  var _a = commonInit(initConfiguration, buildEnv),\n      configuration = _a.configuration,\n      internalMonitoring = _a.internalMonitoring;\n\n  var errorObservable = new Observable();\n\n  if (initConfiguration.forwardErrorsToLogs !== false) {\n    trackConsoleError(errorObservable);\n    trackRuntimeError(errorObservable);\n    trackNetworkError(configuration, errorObservable);\n  }\n\n  var session = startLoggerSession(configuration, areCookiesAuthorized(configuration.cookieOptions));\n  return doStartLogs(configuration, errorObservable, internalMonitoring, session, errorLogger, getGlobalContext);\n}\nexport function doStartLogs(configuration, errorObservable, internalMonitoring, session, errorLogger, getGlobalContext) {\n  internalMonitoring.setExternalContextProvider(function () {\n    return combine({\n      session_id: session.getId()\n    }, getGlobalContext(), getRUMInternalContext());\n  });\n  var assemble = buildAssemble(session, configuration, reportError);\n  var batch = startLoggerBatch(configuration);\n\n  function reportError(error) {\n    errorLogger.error(error.message, combine({\n      date: error.startClocks.timeStamp,\n      error: {\n        kind: error.type,\n        origin: error.source,\n        stack: error.stack\n      }\n    }, error.resource ? {\n      http: {\n        method: error.resource.method,\n        status_code: error.resource.statusCode,\n        url: error.resource.url\n      }\n    } : undefined, getRUMInternalContext(error.startClocks.relative)));\n  }\n\n  errorObservable.subscribe(reportError);\n  return function (message, currentContext) {\n    var contextualizedMessage = assemble(message, currentContext);\n\n    if (contextualizedMessage) {\n      batch.add(contextualizedMessage);\n    }\n  };\n}\n\nfunction startLoggerBatch(configuration) {\n  var primaryBatch = createLoggerBatch(configuration.logsEndpoint);\n  var replicaBatch;\n\n  if (configuration.replica !== undefined) {\n    replicaBatch = createLoggerBatch(configuration.replica.logsEndpoint);\n  }\n\n  function createLoggerBatch(endpointUrl) {\n    return new Batch(new HttpRequest(endpointUrl, configuration.batchBytesLimit), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout);\n  }\n\n  return {\n    add: function add(message) {\n      primaryBatch.add(message);\n\n      if (replicaBatch) {\n        replicaBatch.add(message);\n      }\n    }\n  };\n}\n\nexport function buildAssemble(session, configuration, reportError) {\n  var errorFilter = createErrorFilter(configuration, reportError);\n  return function (message, currentContext) {\n    if (!session.isTracked()) {\n      return undefined;\n    }\n\n    var contextualizedMessage = combine({\n      service: configuration.service,\n      session_id: session.getId()\n    }, currentContext, getRUMInternalContext(), message);\n\n    if (configuration.beforeSend && configuration.beforeSend(contextualizedMessage) === false) {\n      return undefined;\n    }\n\n    if (contextualizedMessage.status === StatusType.error && errorFilter.isLimitReached()) {\n      return undefined;\n    }\n\n    return contextualizedMessage;\n  };\n}\n\nfunction getRUMInternalContext(startTime) {\n  var rum = window.DD_RUM;\n  return rum && rum.getInternalContext ? rum.getInternalContext(startTime) : undefined;\n}","map":{"version":3,"mappings":"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","names":["areCookiesAuthorized","Batch","combine","commonInit","createErrorFilter","HttpRequest","Observable","trackRuntimeError","trackConsoleError","trackNetworkError","StatusType","startLoggerSession","buildEnv","startLogs","initConfiguration","errorLogger","getGlobalContext","configuration","internalMonitoring","errorObservable","forwardErrorsToLogs","session","cookieOptions","doStartLogs","setExternalContextProvider","session_id","getId","getRUMInternalContext","assemble","buildAssemble","reportError","batch","startLoggerBatch","error","message","date","startClocks","timeStamp","kind","type","origin","source","stack","resource","http","method","status_code","statusCode","url","undefined","relative","subscribe","currentContext","contextualizedMessage","add","primaryBatch","createLoggerBatch","logsEndpoint","replicaBatch","replica","endpointUrl","batchBytesLimit","maxBatchSize","maxMessageSize","flushTimeout","errorFilter","isTracked","service","beforeSend","status","isLimitReached","startTime","rum","window","DD_RUM","getInternalContext"],"sourceRoot":"","sources":["../../src/boot/startLogs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}