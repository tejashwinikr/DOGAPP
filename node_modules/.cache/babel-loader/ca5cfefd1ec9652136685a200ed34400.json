{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { monitor, callMonitored } from '../domain/internalMonitoring';\nimport { computeStackTrace } from '../domain/tracekit';\nimport { toStackTraceString } from '../tools/error';\nimport { elapsed, clocksNow, timeStampNow } from '../tools/timeUtils';\nimport { normalizeUrl } from '../tools/urlPolyfill';\nvar fetchProxySingleton;\nvar originalFetch;\nvar beforeSendCallbacks = [];\nvar onRequestCompleteCallbacks = [];\nexport function startFetchProxy() {\n  if (!fetchProxySingleton) {\n    proxyFetch();\n    fetchProxySingleton = {\n      beforeSend: function beforeSend(callback) {\n        beforeSendCallbacks.push(callback);\n      },\n      onRequestComplete: function onRequestComplete(callback) {\n        onRequestCompleteCallbacks.push(callback);\n      }\n    };\n  }\n\n  return fetchProxySingleton;\n}\nexport function resetFetchProxy() {\n  if (fetchProxySingleton) {\n    fetchProxySingleton = undefined;\n    beforeSendCallbacks.splice(0, beforeSendCallbacks.length);\n    onRequestCompleteCallbacks.splice(0, onRequestCompleteCallbacks.length);\n    window.fetch = originalFetch;\n  }\n}\n\nfunction proxyFetch() {\n  if (!window.fetch) {\n    return;\n  }\n\n  originalFetch = window.fetch;\n\n  window.fetch = function (input, init) {\n    var responsePromise;\n    var context = callMonitored(beforeSend, null, [input, init]);\n\n    if (context) {\n      responsePromise = originalFetch.call(this, context.input, context.init);\n      callMonitored(afterSend, null, [responsePromise, context]);\n    } else {\n      responsePromise = originalFetch.call(this, input, init);\n    }\n\n    return responsePromise;\n  };\n}\n\nfunction beforeSend(input, init) {\n  var method = init && init.method || typeof input === 'object' && input.method || 'GET';\n  var url = normalizeUrl(typeof input === 'object' && input.url || input);\n  var startClocks = clocksNow();\n  var context = {\n    init: init,\n    input: input,\n    method: method,\n    startClocks: startClocks,\n    url: url\n  };\n  beforeSendCallbacks.forEach(function (callback) {\n    return callback(context);\n  });\n  return context;\n}\n\nfunction afterSend(responsePromise, context) {\n  var _this = this;\n\n  var reportFetch = function reportFetch(response) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var text, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            context.duration = elapsed(context.startClocks.timeStamp, timeStampNow());\n            if (!('stack' in response || response instanceof Error)) return [3\n            /*break*/\n            , 1];\n            context.status = 0;\n            context.responseText = toStackTraceString(computeStackTrace(response));\n            context.isAborted = response instanceof DOMException && response.code === DOMException.ABORT_ERR;\n            context.error = response;\n            onRequestCompleteCallbacks.forEach(function (callback) {\n              return callback(context);\n            });\n            return [3\n            /*break*/\n            , 6];\n\n          case 1:\n            if (!('status' in response)) return [3\n            /*break*/\n            , 6];\n            text = void 0;\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , response.clone().text()];\n\n          case 3:\n            text = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            e_1 = _a.sent();\n            text = \"Unable to retrieve response: \" + e_1;\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            context.response = response;\n            context.responseText = text;\n            context.responseType = response.type;\n            context.status = response.status;\n            context.isAborted = false;\n            onRequestCompleteCallbacks.forEach(function (callback) {\n              return callback(context);\n            });\n            _a.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  responsePromise.then(monitor(reportFetch), monitor(reportFetch));\n}","map":{"version":3,"mappings":"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","names":["monitor","callMonitored","computeStackTrace","toStackTraceString","elapsed","clocksNow","timeStampNow","normalizeUrl","fetchProxySingleton","originalFetch","beforeSendCallbacks","onRequestCompleteCallbacks","startFetchProxy","proxyFetch","beforeSend","callback","push","onRequestComplete","resetFetchProxy","undefined","splice","length","window","fetch","input","init","responsePromise","context","call","afterSend","method","url","startClocks","forEach","reportFetch","response","duration","timeStamp","Error","status","responseText","isAborted","DOMException","code","ABORT_ERR","error","text","clone","_a","e_1","responseType","type","then"],"sourceRoot":"","sources":["../../src/browser/fetchProxy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}