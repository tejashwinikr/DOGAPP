{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { ErrorSource, toStackTraceString, ErrorHandling, createHandlingStack, formatErrorMessage } from '../../tools/error';\nimport { Observable } from '../../tools/observable';\nimport { clocksNow } from '../../tools/timeUtils';\nimport { find, jsonStringify } from '../../tools/utils';\nimport { callMonitored } from '../internalMonitoring';\nimport { computeStackTrace } from '../tracekit';\n/* eslint-disable no-console */\n\nexport function trackConsoleError(errorObservable) {\n  startConsoleErrorProxy().subscribe(function (error) {\n    return errorObservable.notify(error);\n  });\n}\nvar originalConsoleError;\nvar consoleErrorObservable;\n\nfunction startConsoleErrorProxy() {\n  if (!consoleErrorObservable) {\n    consoleErrorObservable = new Observable();\n    originalConsoleError = console.error;\n\n    console.error = function () {\n      var params = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        originalConsoleError.apply(console, params);\n\n        var rawError = __assign(__assign({}, buildErrorFromParams(params, handlingStack)), {\n          source: ErrorSource.CONSOLE,\n          startClocks: clocksNow(),\n          handling: ErrorHandling.HANDLED\n        });\n\n        consoleErrorObservable.notify(rawError);\n      });\n    };\n  }\n\n  return consoleErrorObservable;\n}\n\nexport function resetConsoleErrorProxy() {\n  if (consoleErrorObservable) {\n    consoleErrorObservable = undefined;\n    console.error = originalConsoleError;\n  }\n}\n\nfunction buildErrorFromParams(params, handlingStack) {\n  var firstErrorParam = find(params, function (param) {\n    return param instanceof Error;\n  });\n  return {\n    message: __spreadArrays(['console error:'], params).map(function (param) {\n      return formatConsoleParameters(param);\n    }).join(' '),\n    stack: firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined,\n    handlingStack: handlingStack\n  };\n}\n\nfunction formatConsoleParameters(param) {\n  if (typeof param === 'string') {\n    return param;\n  }\n\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param));\n  }\n\n  return jsonStringify(param, undefined, 2);\n}","map":{"version":3,"mappings":";AAAA,SACEA,WADF,EAEEC,kBAFF,EAGEC,aAHF,EAIEC,mBAJF,EAKEC,kBALF,QAOO,mBAPP;AAQA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,IAAT,EAAeC,aAAf,QAAoC,mBAApC;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA;;AACA,OAAM,SAAUC,iBAAV,CAA4BC,eAA5B,EAAiE;EACrEC,sBAAsB,GAAGC,SAAzB,CAAmC,UAACC,KAAD,EAAM;IAAK,sBAAe,CAACC,MAAhB,CAAuBD,KAAvB;EAA6B,CAA3E;AACD;AAED,IAAIE,oBAAJ;AACA,IAAIC,sBAAJ;;AAEA,SAASL,sBAAT,GAA+B;EAC7B,IAAI,CAACK,sBAAL,EAA6B;IAC3BA,sBAAsB,GAAG,IAAIb,UAAJ,EAAzB;IACAY,oBAAoB,GAAGE,OAAO,CAACJ,KAA/B;;IAEAI,OAAO,CAACJ,KAAR,GAAgB;MAAC;;WAAA,yCAAoB;QAApBK;;;MACf,IAAMC,aAAa,GAAGlB,mBAAmB,EAAzC;MACAM,aAAa,CAAC;QACZQ,oBAAoB,CAACK,KAArB,CAA2BH,OAA3B,EAAoCC,MAApC;;QACA,IAAMG,QAAQ,yBACTC,oBAAoB,CAACJ,MAAD,EAASC,aAAT,CADX,GACkC;UAC9CI,MAAM,EAAEzB,WAAW,CAAC0B,OAD0B;UAE9CC,WAAW,EAAErB,SAAS,EAFwB;UAG9CsB,QAAQ,EAAE1B,aAAa,CAAC2B;QAHsB,CADlC,CAAd;;QAMAX,sBAAuB,CAACF,MAAxB,CAA+BO,QAA/B;MACD,CATY,CAAb;IAUD,CAZD;EAaD;;EACD,OAAOL,sBAAP;AACD;;AAED,OAAM,SAAUY,sBAAV,GAAgC;EACpC,IAAIZ,sBAAJ,EAA4B;IAC1BA,sBAAsB,GAAGa,SAAzB;IACAZ,OAAO,CAACJ,KAAR,GAAgBE,oBAAhB;EACD;AACF;;AAED,SAASO,oBAAT,CAA8BJ,MAA9B,EAAiDC,aAAjD,EAAsE;EACpE,IAAMW,eAAe,GAAGzB,IAAI,CAACa,MAAD,EAAS,UAACa,KAAD,EAAe;IAAqB,YAAK,YAAYC,KAAjB;EAAsB,CAAnE,CAA5B;EAEA,OAAO;IACLC,OAAO,EAAEC,gBAAC,gBAAD,GAAsBhB,MAAtB,EAA8BiB,GAA9B,CAAkC,UAACJ,KAAD,EAAM;MAAK,8BAAuB,CAACA,KAAD,CAAvB;IAA8B,CAA3E,EAA6EK,IAA7E,CAAkF,GAAlF,CADJ;IAELC,KAAK,EAAEP,eAAe,GAAG/B,kBAAkB,CAACS,iBAAiB,CAACsB,eAAD,CAAlB,CAArB,GAA4DD,SAF7E;IAGLV,aAAa;EAHR,CAAP;AAKD;;AAED,SAASmB,uBAAT,CAAiCP,KAAjC,EAA+C;EAC7C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAOA,KAAP;EACD;;EACD,IAAIA,KAAK,YAAYC,KAArB,EAA4B;IAC1B,OAAO9B,kBAAkB,CAACM,iBAAiB,CAACuB,KAAD,CAAlB,CAAzB;EACD;;EACD,OAAOzB,aAAa,CAACyB,KAAD,EAAQF,SAAR,EAAmB,CAAnB,CAApB;AACD","names":["ErrorSource","toStackTraceString","ErrorHandling","createHandlingStack","formatErrorMessage","Observable","clocksNow","find","jsonStringify","callMonitored","computeStackTrace","trackConsoleError","errorObservable","startConsoleErrorProxy","subscribe","error","notify","originalConsoleError","consoleErrorObservable","console","params","handlingStack","apply","rawError","buildErrorFromParams","source","CONSOLE","startClocks","handling","HANDLED","resetConsoleErrorProxy","undefined","firstErrorParam","param","Error","message","__spreadArrays","map","join","stack","formatConsoleParameters"],"sourceRoot":"","sources":["../../../src/domain/error/trackConsoleError.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}