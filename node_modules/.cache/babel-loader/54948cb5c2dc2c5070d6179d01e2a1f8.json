{"ast":null,"code":"import { ErrorSource, RequestType, resetFetchProxy, resetXhrProxy, startFetchProxy, startXhrProxy } from '@datadog/browser-core';\nexport function trackNetworkError(configuration, errorObservable) {\n  startXhrProxy().onRequestComplete(function (context) {\n    return handleCompleteRequest(RequestType.XHR, context);\n  });\n  startFetchProxy().onRequestComplete(function (context) {\n    return handleCompleteRequest(RequestType.FETCH, context);\n  });\n\n  function handleCompleteRequest(type, request) {\n    if (!configuration.isIntakeUrl(request.url) && (isRejected(request) || isServerError(request))) {\n      errorObservable.notify({\n        message: format(type) + \" error \" + request.method + \" \" + request.url,\n        resource: {\n          method: request.method,\n          statusCode: request.status,\n          url: request.url\n        },\n        source: ErrorSource.NETWORK,\n        stack: truncateResponseText(request.responseText, configuration) || 'Failed to load',\n        startClocks: request.startClocks\n      });\n    }\n  }\n\n  return {\n    stop: function stop() {\n      resetXhrProxy();\n      resetFetchProxy();\n    }\n  };\n}\n\nfunction isRejected(request) {\n  return request.status === 0 && request.responseType !== 'opaque';\n}\n\nfunction isServerError(request) {\n  return request.status >= 500;\n}\n\nfunction truncateResponseText(responseText, configuration) {\n  if (responseText && responseText.length > configuration.requestErrorResponseLengthLimit) {\n    return responseText.substring(0, configuration.requestErrorResponseLengthLimit) + \"...\";\n  }\n\n  return responseText;\n}\n\nfunction format(type) {\n  if (RequestType.XHR === type) {\n    return 'XHR';\n  }\n\n  return 'Fetch';\n}","map":{"version":3,"mappings":"AAAA,SAEEA,WAFF,EAMEC,WANF,EAOEC,eAPF,EAQEC,aARF,EASEC,eATF,EAUEC,aAVF,QAYO,uBAZP;AAcA,OAAM,SAAUC,iBAAV,CAA4BC,aAA5B,EAA0DC,eAA1D,EAA+F;EACnGH,aAAa,GAAGI,iBAAhB,CAAkC,UAACC,OAAD,EAAQ;IAAK,4BAAqB,CAACT,WAAW,CAACU,GAAb,EAAkBD,OAAlB,CAArB;EAA+C,CAA9F;EACAN,eAAe,GAAGK,iBAAlB,CAAoC,UAACC,OAAD,EAAQ;IAAK,4BAAqB,CAACT,WAAW,CAACW,KAAb,EAAoBF,OAApB,CAArB;EAAiD,CAAlG;;EAEA,SAASG,qBAAT,CAA+BC,IAA/B,EAAkDC,OAAlD,EAAoG;IAClG,IAAI,CAACR,aAAa,CAACS,WAAd,CAA0BD,OAAO,CAACE,GAAlC,CAAD,KAA4CC,UAAU,CAACH,OAAD,CAAV,IAAuBI,aAAa,CAACJ,OAAD,CAAhF,CAAJ,EAAgG;MAC9FP,eAAe,CAACY,MAAhB,CAAuB;QACrBC,OAAO,EAAKC,MAAM,CAACR,IAAD,CAAN,GAAY,SAAZ,GAAsBC,OAAO,CAACQ,MAA9B,GAAoC,GAApC,GAAwCR,OAAO,CAACE,GADvC;QAErBO,QAAQ,EAAE;UACRD,MAAM,EAAER,OAAO,CAACQ,MADR;UAERE,UAAU,EAAEV,OAAO,CAACW,MAFZ;UAGRT,GAAG,EAAEF,OAAO,CAACE;QAHL,CAFW;QAOrBU,MAAM,EAAE3B,WAAW,CAAC4B,OAPC;QAQrBC,KAAK,EAAEC,oBAAoB,CAACf,OAAO,CAACgB,YAAT,EAAuBxB,aAAvB,CAApB,IAA6D,gBAR/C;QASrByB,WAAW,EAAEjB,OAAO,CAACiB;MATA,CAAvB;IAWD;EACF;;EAED,OAAO;IACLC,IAAI,EAAE;MACJ9B,aAAa;MACbD,eAAe;IAChB;EAJI,CAAP;AAMD;;AAED,SAASgB,UAAT,CAAoBH,OAApB,EAAsE;EACpE,OAAOA,OAAO,CAACW,MAAR,KAAmB,CAAnB,IAAwBX,OAAO,CAACmB,YAAR,KAAyB,QAAxD;AACD;;AAED,SAASf,aAAT,CAAuBJ,OAAvB,EAAkD;EAChD,OAAOA,OAAO,CAACW,MAAR,IAAkB,GAAzB;AACD;;AAED,SAASI,oBAAT,CAA8BC,YAA9B,EAAgExB,aAAhE,EAA4F;EAC1F,IAAIwB,YAAY,IAAIA,YAAY,CAACI,MAAb,GAAsB5B,aAAa,CAAC6B,+BAAxD,EAAyF;IACvF,OAAUL,YAAY,CAACM,SAAb,CAAuB,CAAvB,EAA0B9B,aAAa,CAAC6B,+BAAxC,IAAwE,KAAlF;EACD;;EACD,OAAOL,YAAP;AACD;;AAED,SAAST,MAAT,CAAgBR,IAAhB,EAAiC;EAC/B,IAAIb,WAAW,CAACU,GAAZ,KAAoBG,IAAxB,EAA8B;IAC5B,OAAO,KAAP;EACD;;EACD,OAAO,OAAP;AACD","names":["ErrorSource","RequestType","resetFetchProxy","resetXhrProxy","startFetchProxy","startXhrProxy","trackNetworkError","configuration","errorObservable","onRequestComplete","context","XHR","FETCH","handleCompleteRequest","type","request","isIntakeUrl","url","isRejected","isServerError","notify","message","format","method","resource","statusCode","status","source","NETWORK","stack","truncateResponseText","responseText","startClocks","stop","responseType","length","requestErrorResponseLengthLimit","substring"],"sourceRoot":"","sources":["../../src/domain/trackNetworkError.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}