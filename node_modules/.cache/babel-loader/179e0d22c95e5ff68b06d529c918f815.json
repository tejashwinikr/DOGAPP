{"ast":null,"code":"import { callMonitored } from '../domain/internalMonitoring';\nimport { computeStackTrace } from '../domain/tracekit';\nimport { jsonStringify, noop } from './utils';\nexport var ErrorSource = {\n  AGENT: 'agent',\n  CONSOLE: 'console',\n  CUSTOM: 'custom',\n  LOGGER: 'logger',\n  NETWORK: 'network',\n  SOURCE: 'source'\n};\nexport var ErrorHandling;\n\n(function (ErrorHandling) {\n  ErrorHandling[\"HANDLED\"] = \"handled\";\n  ErrorHandling[\"UNHANDLED\"] = \"unhandled\";\n})(ErrorHandling || (ErrorHandling = {}));\n\nexport function formatUnknownError(stackTrace, errorObject, nonErrorPrefix, handlingStack) {\n  if (!stackTrace || stackTrace.message === undefined && !(errorObject instanceof Error)) {\n    return {\n      message: nonErrorPrefix + \" \" + jsonStringify(errorObject),\n      stack: 'No stack, consider using an instance of Error',\n      handlingStack: handlingStack,\n      type: stackTrace && stackTrace.name\n    };\n  }\n\n  return {\n    message: stackTrace.message || 'Empty message',\n    stack: toStackTraceString(stackTrace),\n    handlingStack: handlingStack,\n    type: stackTrace.name\n  };\n}\nexport function toStackTraceString(stack) {\n  var result = formatErrorMessage(stack);\n  stack.stack.forEach(function (frame) {\n    var func = frame.func === '?' ? '<anonymous>' : frame.func;\n    var args = frame.args && frame.args.length > 0 ? \"(\" + frame.args.join(', ') + \")\" : '';\n    var line = frame.line ? \":\" + frame.line : '';\n    var column = frame.line && frame.column ? \":\" + frame.column : '';\n    result += \"\\n  at \" + func + args + \" @ \" + frame.url + line + column;\n  });\n  return result;\n}\nexport function formatErrorMessage(stack) {\n  return (stack.name || 'Error') + \": \" + stack.message;\n}\n/**\n Creates a stacktrace without SDK internal frames.\n \n Constraints:\n - Has to be called at the utmost position of the call stack.\n - No internal monitoring should encapsulate the function, that is why we need to use callMonitored inside of it.\n */\n\nexport function createHandlingStack() {\n  /**\n   * Skip the two internal frames:\n   * - SDK API (console.error, ...)\n   * - this function\n   * in order to keep only the user calls\n   */\n  var internalFramesToSkip = 2;\n  var error = new Error();\n  var formattedStack; // IE needs to throw the error to fill in the stack trace\n\n  if (!error.stack) {\n    try {\n      throw error;\n    } catch (e) {\n      noop();\n    }\n  }\n\n  callMonitored(function () {\n    var stackTrace = computeStackTrace(error);\n    stackTrace.stack = stackTrace.stack.slice(internalFramesToSkip);\n    formattedStack = toStackTraceString(stackTrace);\n  });\n  return formattedStack;\n}","map":{"version":3,"mappings":"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","names":["callMonitored","computeStackTrace","jsonStringify","noop","ErrorSource","AGENT","CONSOLE","CUSTOM","LOGGER","NETWORK","SOURCE","ErrorHandling","formatUnknownError","stackTrace","errorObject","nonErrorPrefix","handlingStack","message","undefined","Error","stack","type","name","toStackTraceString","result","formatErrorMessage","forEach","frame","func","args","length","join","line","column","url","createHandlingStack","internalFramesToSkip","error","formattedStack","e","slice"],"sourceRoot":"","sources":["../../src/tools/error.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}