{"ast":null,"code":"import { cacheCookieAccess, COOKIE_ACCESS_DELAY } from '../browser/cookie';\nimport { Observable } from '../tools/observable';\nimport * as utils from '../tools/utils';\nimport { monitor } from './internalMonitoring';\nimport { tryOldCookiesMigration } from './oldCookiesMigration';\nexport var SESSION_COOKIE_NAME = '_dd_s';\nexport var SESSION_EXPIRATION_DELAY = 15 * utils.ONE_MINUTE;\nexport var SESSION_TIME_OUT_DELAY = 4 * utils.ONE_HOUR;\nexport var VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE;\n/**\n * Limit access to cookie to avoid performance issues\n */\n\nexport function startSessionManagement(options, productKey, computeSessionState) {\n  var sessionCookie = cacheCookieAccess(SESSION_COOKIE_NAME, options);\n  tryOldCookiesMigration(sessionCookie);\n  var renewObservable = new Observable();\n  var currentSessionId = retrieveActiveSession(sessionCookie).id;\n  var expandOrRenewSession = utils.throttle(monitor(function () {\n    var session = retrieveActiveSession(sessionCookie);\n\n    var _a = computeSessionState(session[productKey]),\n        trackingType = _a.trackingType,\n        isTracked = _a.isTracked;\n\n    session[productKey] = trackingType;\n\n    if (isTracked && !session.id) {\n      session.id = utils.generateUUID();\n      session.created = String(Date.now());\n    } // save changes and expand session duration\n\n\n    persistSession(session, sessionCookie); // If the session id has changed, notify that the session has been renewed\n\n    if (isTracked && currentSessionId !== session.id) {\n      currentSessionId = session.id;\n      renewObservable.notify();\n    }\n  }), COOKIE_ACCESS_DELAY).throttled;\n\n  var expandSession = function expandSession() {\n    var session = retrieveActiveSession(sessionCookie);\n    persistSession(session, sessionCookie);\n  };\n\n  expandOrRenewSession();\n  trackActivity(expandOrRenewSession);\n  trackVisibility(expandSession);\n  return {\n    getId: function getId() {\n      return retrieveActiveSession(sessionCookie).id;\n    },\n    getTrackingType: function getTrackingType() {\n      return retrieveActiveSession(sessionCookie)[productKey];\n    },\n    renewObservable: renewObservable\n  };\n}\nvar SESSION_ENTRY_REGEXP = /^([a-z]+)=([a-z0-9-]+)$/;\nvar SESSION_ENTRY_SEPARATOR = '&';\nexport function isValidSessionString(sessionString) {\n  return sessionString !== undefined && (sessionString.indexOf(SESSION_ENTRY_SEPARATOR) !== -1 || SESSION_ENTRY_REGEXP.test(sessionString));\n}\n\nfunction retrieveActiveSession(sessionCookie) {\n  var session = retrieveSession(sessionCookie);\n\n  if (isActiveSession(session)) {\n    return session;\n  }\n\n  clearSession(sessionCookie);\n  return {};\n}\n\nfunction isActiveSession(session) {\n  // created and expire can be undefined for versions which was not storing them\n  // these checks could be removed when older versions will not be available/live anymore\n  return (session.created === undefined || Date.now() - Number(session.created) < SESSION_TIME_OUT_DELAY) && (session.expire === undefined || Date.now() < Number(session.expire));\n}\n\nfunction retrieveSession(sessionCookie) {\n  var sessionString = sessionCookie.get();\n  var session = {};\n\n  if (isValidSessionString(sessionString)) {\n    sessionString.split(SESSION_ENTRY_SEPARATOR).forEach(function (entry) {\n      var matches = SESSION_ENTRY_REGEXP.exec(entry);\n\n      if (matches !== null) {\n        var key = matches[1],\n            value = matches[2];\n        session[key] = value;\n      }\n    });\n  }\n\n  return session;\n}\n\nexport function persistSession(session, cookie) {\n  if (utils.isEmptyObject(session)) {\n    clearSession(cookie);\n    return;\n  }\n\n  session.expire = String(Date.now() + SESSION_EXPIRATION_DELAY);\n  var cookieString = utils.objectEntries(session).map(function (_a) {\n    var key = _a[0],\n        value = _a[1];\n    return key + \"=\" + value;\n  }).join(SESSION_ENTRY_SEPARATOR);\n  cookie.set(cookieString, SESSION_EXPIRATION_DELAY);\n}\n\nfunction clearSession(cookie) {\n  cookie.set('', 0);\n}\n\nexport function stopSessionManagement() {\n  stopCallbacks.forEach(function (e) {\n    return e();\n  });\n  stopCallbacks = [];\n}\nvar stopCallbacks = [];\nexport function trackActivity(expandOrRenewSession) {\n  var stop = utils.addEventListeners(window, [\"click\"\n  /* CLICK */\n  , \"touchstart\"\n  /* TOUCH_START */\n  , \"keydown\"\n  /* KEY_DOWN */\n  , \"scroll\"\n  /* SCROLL */\n  ], expandOrRenewSession, {\n    capture: true,\n    passive: true\n  }).stop;\n  stopCallbacks.push(stop);\n}\n\nfunction trackVisibility(expandSession) {\n  var expandSessionWhenVisible = monitor(function () {\n    if (document.visibilityState === 'visible') {\n      expandSession();\n    }\n  });\n  var stop = utils.addEventListener(document, \"visibilitychange\"\n  /* VISIBILITY_CHANGE */\n  , expandSessionWhenVisible).stop;\n  stopCallbacks.push(stop);\n  var visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);\n  stopCallbacks.push(function () {\n    clearInterval(visibilityCheckInterval);\n  });\n}","map":{"version":3,"mappings":"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","names":["cacheCookieAccess","COOKIE_ACCESS_DELAY","Observable","utils","monitor","tryOldCookiesMigration","SESSION_COOKIE_NAME","SESSION_EXPIRATION_DELAY","ONE_MINUTE","SESSION_TIME_OUT_DELAY","ONE_HOUR","VISIBILITY_CHECK_DELAY","startSessionManagement","options","productKey","computeSessionState","sessionCookie","renewObservable","currentSessionId","retrieveActiveSession","id","expandOrRenewSession","throttle","session","trackingType","isTracked","generateUUID","created","String","Date","now","persistSession","notify","throttled","expandSession","trackActivity","trackVisibility","getId","getTrackingType","SESSION_ENTRY_REGEXP","SESSION_ENTRY_SEPARATOR","isValidSessionString","sessionString","undefined","indexOf","test","retrieveSession","isActiveSession","clearSession","Number","expire","get","split","forEach","entry","matches","exec","value","key","cookie","isEmptyObject","cookieString","objectEntries","map","_a","join","set","stopSessionManagement","stopCallbacks","e","addEventListeners","window","capture","passive","stop","push","expandSessionWhenVisible","document","visibilityState","addEventListener","visibilityCheckInterval","setInterval","clearInterval"],"sourceRoot":"","sources":["../../src/domain/sessionManagement.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}