{"ast":null,"code":"import { performDraw, startSessionManagement } from '@datadog/browser-core';\nexport var LOGGER_SESSION_KEY = 'logs';\nexport var LoggerTrackingType;\n\n(function (LoggerTrackingType) {\n  LoggerTrackingType[\"NOT_TRACKED\"] = \"0\";\n  LoggerTrackingType[\"TRACKED\"] = \"1\";\n})(LoggerTrackingType || (LoggerTrackingType = {}));\n\nexport function startLoggerSession(configuration, areCookieAuthorized) {\n  if (!areCookieAuthorized) {\n    var isTracked_1 = computeTrackingType(configuration) === LoggerTrackingType.TRACKED;\n    return {\n      getId: function getId() {\n        return undefined;\n      },\n      isTracked: function isTracked() {\n        return isTracked_1;\n      }\n    };\n  }\n\n  var session = startSessionManagement(configuration.cookieOptions, LOGGER_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  });\n  return {\n    getId: session.getId,\n    isTracked: function isTracked() {\n      return session.getTrackingType() === LoggerTrackingType.TRACKED;\n    }\n  };\n}\n\nfunction computeTrackingType(configuration) {\n  if (!performDraw(configuration.sampleRate)) {\n    return LoggerTrackingType.NOT_TRACKED;\n  }\n\n  return LoggerTrackingType.TRACKED;\n}\n\nfunction computeSessionState(configuration, rawSessionType) {\n  var trackingType = hasValidLoggerSession(rawSessionType) ? rawSessionType : computeTrackingType(configuration);\n  return {\n    trackingType: trackingType,\n    isTracked: trackingType === LoggerTrackingType.TRACKED\n  };\n}\n\nfunction hasValidLoggerSession(trackingType) {\n  return trackingType === LoggerTrackingType.NOT_TRACKED || trackingType === LoggerTrackingType.TRACKED;\n}","map":{"version":3,"mappings":"AAAA,SAAwBA,WAAxB,EAAqCC,sBAArC,QAAmE,uBAAnE;AAEA,OAAO,IAAMC,kBAAkB,GAAG,MAA3B;AAOP,WAAYC,kBAAZ;;AAAA,WAAYA,kBAAZ,EAA8B;EAC5BA;EACAA;AACD,CAHD,EAAYA,kBAAkB,KAAlBA,kBAAkB,MAA9B;;AAKA,OAAM,SAAUC,kBAAV,CAA6BC,aAA7B,EAA2DC,mBAA3D,EAAuF;EAC3F,IAAI,CAACA,mBAAL,EAA0B;IACxB,IAAMC,WAAS,GAAGC,mBAAmB,CAACH,aAAD,CAAnB,KAAuCF,kBAAkB,CAACM,OAA5E;IACA,OAAO;MACLC,KAAK,EAAE;QAAM;MAAS,CADjB;MAELC,SAAS,EAAE;QAAM;MAAS;IAFrB,CAAP;EAID;;EACD,IAAMC,OAAO,GAAGX,sBAAsB,CAACI,aAAa,CAACQ,aAAf,EAA8BX,kBAA9B,EAAkD,UAACY,eAAD,EAAgB;IACtG,0BAAmB,CAACT,aAAD,EAAgBS,eAAhB,CAAnB;EAAmD,CADf,CAAtC;EAGA,OAAO;IACLJ,KAAK,EAAEE,OAAO,CAACF,KADV;IAELC,SAAS,EAAE;MAAM,cAAO,CAACI,eAAR,OAA8BZ,kBAAkB,CAACM,OAAjD;IAAwD;EAFpE,CAAP;AAID;;AAED,SAASD,mBAAT,CAA6BH,aAA7B,EAAyD;EACvD,IAAI,CAACL,WAAW,CAACK,aAAa,CAACW,UAAf,CAAhB,EAA4C;IAC1C,OAAOb,kBAAkB,CAACc,WAA1B;EACD;;EACD,OAAOd,kBAAkB,CAACM,OAA1B;AACD;;AAED,SAASS,mBAAT,CAA6Bb,aAA7B,EAA2Dc,cAA3D,EAAkF;EAChF,IAAMC,YAAY,GAAGC,qBAAqB,CAACF,cAAD,CAArB,GAAwCA,cAAxC,GAAyDX,mBAAmB,CAACH,aAAD,CAAjG;EACA,OAAO;IACLe,YAAY,cADP;IAELT,SAAS,EAAES,YAAY,KAAKjB,kBAAkB,CAACM;EAF1C,CAAP;AAID;;AAED,SAASY,qBAAT,CAA+BD,YAA/B,EAAoD;EAClD,OAAOA,YAAY,KAAKjB,kBAAkB,CAACc,WAApC,IAAmDG,YAAY,KAAKjB,kBAAkB,CAACM,OAA9F;AACD","names":["performDraw","startSessionManagement","LOGGER_SESSION_KEY","LoggerTrackingType","startLoggerSession","configuration","areCookieAuthorized","isTracked_1","computeTrackingType","TRACKED","getId","isTracked","session","cookieOptions","rawTrackingType","getTrackingType","sampleRate","NOT_TRACKED","computeSessionState","rawSessionType","trackingType","hasValidLoggerSession"],"sourceRoot":"","sources":["../../src/domain/loggerSession.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}