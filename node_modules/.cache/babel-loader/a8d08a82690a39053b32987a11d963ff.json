{"ast":null,"code":"import { monitor } from '../internalMonitoring';\nimport { computeStackTrace, augmentStackTraceWithInitialElement } from './computeStackTrace'; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n// eslint-disable-next-line  max-len\n\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   subscribe(function(stackInfo) { ... })\n *   unsubscribe(function(stackInfo) { ... })\n *   report(exception)\n *   try { ...code... } catch(ex) { report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where report was called.\n *\n * Handlers receive a StackTrace object as described in the\n * computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\n\n/**\n * Reports an unhandled Error.\n * @param {Error} ex\n * @memberof report\n * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n */\n\nexport function report(ex) {\n  if (lastExceptionStack) {\n    if (lastException === ex) {\n      return; // already caught by an inner catch block, ignore\n    }\n\n    processLastException();\n  }\n\n  var stack = computeStackTrace(ex);\n  lastExceptionStack = stack;\n  lastException = ex; // If the stack trace is incomplete, wait for 2 seconds for\n  // slow slow IE to see if onerror occurs or not before reporting\n  // this exception; otherwise, we will end up with an incomplete\n  // stack trace\n\n  setTimeout(monitor(function () {\n    if (lastException === ex) {\n      processLastException();\n    }\n  }), stack.incomplete ? 2000 : 0);\n  throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n}\nvar handlers = [];\nvar lastException;\nvar lastExceptionStack;\n/**\n * Add a crash handler.\n * @param {Function} handler\n * @memberof report\n */\n\nexport function subscribe(handler) {\n  installGlobalHandler();\n  installGlobalUnhandledRejectionHandler();\n  handlers.push(handler);\n}\n/**\n * Remove a crash handler.\n * @param {Function} handler\n * @memberof report\n */\n\nexport function unsubscribe(handler) {\n  for (var i = handlers.length - 1; i >= 0; i -= 1) {\n    if (handlers[i] === handler) {\n      handlers.splice(i, 1);\n    }\n  }\n\n  if (handlers.length === 0) {\n    uninstallGlobalHandler();\n    uninstallGlobalUnhandledRejectionHandler();\n  }\n}\n/**\n * Dispatch stack information to all handlers.\n * @param {StackTrace} stack\n * @param {boolean} isWindowError Is this a top-level window error?\n * @param {Error=} error The error that's being handled (if available, null otherwise)\n * @memberof report\n * @throws An exception if an error occurs while calling an handler.\n */\n\nfunction notifyHandlers(stack, isWindowError, error) {\n  var exception;\n  handlers.forEach(function (handler) {\n    try {\n      handler(stack, isWindowError, error);\n    } catch (inner) {\n      exception = inner;\n    }\n  });\n\n  if (exception) {\n    throw exception;\n  }\n}\n\nvar oldOnerrorHandler;\nvar onErrorHandlerInstalled;\nvar oldOnunhandledrejectionHandler;\nvar onUnhandledRejectionHandlerInstalled;\n/**\n * Ensures all global unhandled exceptions are recorded.\n * Supported by Gecko and IE.\n * @param {Event|string} message Error message.\n * @param {string=} url URL of script that generated the exception.\n * @param {(number|string)=} lineNo The line number at which the error occurred.\n * @param {(number|string)=} columnNo The column number at which the error occurred.\n * @param {Error=} errorObj The actual Error object.\n * @memberof report\n */\n\nexport function traceKitWindowOnError(message, url, lineNo, columnNo, errorObj) {\n  var stack;\n\n  if (lastExceptionStack) {\n    augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo);\n    processLastException();\n  } else if (errorObj) {\n    stack = computeStackTrace(errorObj);\n    notifyHandlers(stack, true, errorObj);\n  } else {\n    var location_1 = {\n      url: url,\n      column: columnNo,\n      line: lineNo\n    };\n    var name_1;\n    var msg = message;\n\n    if ({}.toString.call(message) === '[object String]') {\n      var groups = ERROR_TYPES_RE.exec(msg);\n\n      if (groups) {\n        name_1 = groups[1];\n        msg = groups[2];\n      }\n    }\n\n    stack = {\n      name: name_1,\n      message: typeof msg === 'string' ? msg : undefined,\n      stack: [location_1]\n    };\n    notifyHandlers(stack, true, message);\n  }\n\n  if (oldOnerrorHandler) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return oldOnerrorHandler.apply(this, arguments);\n  }\n\n  return false;\n}\n/**\n * Ensures all unhandled rejections are recorded.\n * @param {PromiseRejectionEvent} e event.\n * @memberof report\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n */\n\nfunction traceKitWindowOnUnhandledRejection(e) {\n  var reason = e.reason || 'Empty reason';\n  var stack = computeStackTrace(reason);\n  notifyHandlers(stack, true, reason);\n}\n/**\n * Install a global onerror handler\n * @memberof report\n */\n\n\nfunction installGlobalHandler() {\n  if (onErrorHandlerInstalled) {\n    return;\n  }\n\n  oldOnerrorHandler = window.onerror;\n  window.onerror = monitor(traceKitWindowOnError);\n  onErrorHandlerInstalled = true;\n}\n/**\n * Uninstall the global onerror handler\n * @memberof report\n */\n\n\nfunction uninstallGlobalHandler() {\n  if (onErrorHandlerInstalled) {\n    window.onerror = oldOnerrorHandler;\n    onErrorHandlerInstalled = false;\n  }\n}\n/**\n * Install a global onunhandledrejection handler\n * @memberof report\n */\n\n\nfunction installGlobalUnhandledRejectionHandler() {\n  if (onUnhandledRejectionHandlerInstalled) {\n    return;\n  }\n\n  oldOnunhandledrejectionHandler = window.onunhandledrejection !== null ? window.onunhandledrejection : undefined;\n  window.onunhandledrejection = monitor(traceKitWindowOnUnhandledRejection);\n  onUnhandledRejectionHandlerInstalled = true;\n}\n/**\n * Uninstall the global onunhandledrejection handler\n * @memberof report\n */\n\n\nfunction uninstallGlobalUnhandledRejectionHandler() {\n  if (onUnhandledRejectionHandlerInstalled) {\n    window.onunhandledrejection = oldOnunhandledrejectionHandler;\n    onUnhandledRejectionHandlerInstalled = false;\n  }\n}\n/**\n * Process the most recent exception\n * @memberof report\n */\n\n\nfunction processLastException() {\n  var currentLastExceptionStack = lastExceptionStack;\n  var currentLastException = lastException;\n  lastExceptionStack = undefined;\n  lastException = undefined;\n  notifyHandlers(currentLastExceptionStack, false, currentLastException);\n}","map":{"version":3,"mappings":"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","names":["monitor","computeStackTrace","augmentStackTraceWithInitialElement","ERROR_TYPES_RE","report","ex","lastExceptionStack","lastException","processLastException","stack","setTimeout","incomplete","handlers","subscribe","handler","installGlobalHandler","installGlobalUnhandledRejectionHandler","push","unsubscribe","i","length","splice","uninstallGlobalHandler","uninstallGlobalUnhandledRejectionHandler","notifyHandlers","isWindowError","error","exception","forEach","inner","oldOnerrorHandler","onErrorHandlerInstalled","oldOnunhandledrejectionHandler","onUnhandledRejectionHandlerInstalled","traceKitWindowOnError","message","url","lineNo","columnNo","errorObj","location_1","column","line","name_1","msg","toString","call","groups","exec","name","undefined","apply","arguments","traceKitWindowOnUnhandledRejection","e","reason","window","onerror","onunhandledrejection","currentLastExceptionStack","currentLastException"],"sourceRoot":"","sources":["../../../src/domain/tracekit/report.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}