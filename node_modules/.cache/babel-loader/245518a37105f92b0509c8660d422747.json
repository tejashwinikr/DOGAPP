{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { areCookiesAuthorized } from '../browser/cookie';\nimport { buildConfiguration } from '../domain/configuration';\nimport { setDebugMode, startInternalMonitoring } from '../domain/internalMonitoring';\nimport { catchUserErrors } from '../tools/catchUserErrors';\nimport { display } from '../tools/display';\nexport function makePublicApi(stub) {\n  var publicApi = __assign(__assign({}, stub), {\n    // This API method is intentionally not monitored, since the only thing executed is the\n    // user-provided 'callback'.  All SDK usages executed in the callback should be monitored, and\n    // we don't want to interfere with the user uncaught exceptions.\n    onReady: function onReady(callback) {\n      callback();\n    }\n  }); // Add an \"hidden\" property to set debug mode. We define it that way to hide it\n  // as much as possible but of course it's not a real protection.\n\n\n  Object.defineProperty(publicApi, '_setDebug', {\n    get: function get() {\n      return setDebugMode;\n    },\n    enumerable: false\n  });\n  return publicApi;\n}\nexport function defineGlobal(global, name, api) {\n  var existingGlobalVariable = global[name];\n  global[name] = api;\n\n  if (existingGlobalVariable && existingGlobalVariable.q) {\n    existingGlobalVariable.q.forEach(function (fn) {\n      return catchUserErrors(fn, 'onReady callback threw an error:')();\n    });\n  }\n}\nexport var BuildMode;\n\n(function (BuildMode) {\n  BuildMode[\"RELEASE\"] = \"release\";\n  BuildMode[\"STAGING\"] = \"staging\";\n  BuildMode[\"E2E_TEST\"] = \"e2e-test\";\n})(BuildMode || (BuildMode = {}));\n\nexport function commonInit(initConfiguration, buildEnv) {\n  var configuration = buildConfiguration(initConfiguration, buildEnv);\n  var internalMonitoring = startInternalMonitoring(configuration);\n  return {\n    configuration: configuration,\n    internalMonitoring: internalMonitoring\n  };\n}\nexport function checkCookiesAuthorized(options) {\n  if (!areCookiesAuthorized(options)) {\n    display.warn('Cookies are not authorized, we will not send any data.');\n    return false;\n  }\n\n  return true;\n}\nexport function checkIsNotLocalFile() {\n  if (isLocalFile()) {\n    display.error('Execution is not allowed in the current context.');\n    return false;\n  }\n\n  return true;\n}\n\nfunction isLocalFile() {\n  return window.location.protocol === 'file:';\n}","map":{"version":3,"mappings":";AAAA,SAASA,oBAAT,QAAoD,mBAApD;AACA,SAASC,kBAAT,QAAsD,yBAAtD;AACA,SAASC,YAAT,EAAuBC,uBAAvB,QAAsD,8BAAtD;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AAEA,OAAM,SAAUC,aAAV,CAA2BC,IAA3B,EAAkC;EACtC,IAAMC,SAAS,yBACVD,IADU,GACN;IAEP;IACA;IACA;IACAE,OAAO,EAAP,iBAAQC,QAAR,EAA4B;MAC1BA,QAAQ;IACT;EAPM,CADM,CAAf,CADsC,CAYtC;EACA;;;EACAC,MAAM,CAACC,cAAP,CAAsBJ,SAAtB,EAAiC,WAAjC,EAA8C;IAC5CK,GAAG;MACD,OAAOX,YAAP;IACD,CAH2C;IAI5CY,UAAU,EAAE;EAJgC,CAA9C;EAOA,OAAON,SAAP;AACD;AAED,OAAM,SAAUO,YAAV,CAA0DC,MAA1D,EAA0EC,IAA1E,EAAsFC,GAAtF,EAAuG;EAC3G,IAAMC,sBAAsB,GAA0CH,MAAM,CAACC,IAAD,CAA5E;EACAD,MAAM,CAACC,IAAD,CAAN,GAAeC,GAAf;;EACA,IAAIC,sBAAsB,IAAIA,sBAAsB,CAACC,CAArD,EAAwD;IACtDD,sBAAsB,CAACC,CAAvB,CAAyBC,OAAzB,CAAiC,UAACC,EAAD,EAAG;MAAK,sBAAe,CAACA,EAAD,EAAK,kCAAL,CAAf;IAAyD,CAAlG;EACD;AACF;AAED,WAAYC,SAAZ;;AAAA,WAAYA,SAAZ,EAAqB;EACnBA;EACAA;EACAA;AACD,CAJD,EAAYA,SAAS,KAATA,SAAS,MAArB;;AAWA,OAAM,SAAUC,UAAV,CAAqBC,iBAArB,EAA2DC,QAA3D,EAA6E;EACjF,IAAMC,aAAa,GAAG1B,kBAAkB,CAACwB,iBAAD,EAAoBC,QAApB,CAAxC;EACA,IAAME,kBAAkB,GAAGzB,uBAAuB,CAACwB,aAAD,CAAlD;EAEA,OAAO;IACLA,aAAa,eADR;IAELC,kBAAkB;EAFb,CAAP;AAID;AAED,OAAM,SAAUC,sBAAV,CAAiCC,OAAjC,EAAuD;EAC3D,IAAI,CAAC9B,oBAAoB,CAAC8B,OAAD,CAAzB,EAAoC;IAClCzB,OAAO,CAAC0B,IAAR,CAAa,wDAAb;IACA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD;AAED,OAAM,SAAUC,mBAAV,GAA6B;EACjC,IAAIC,WAAW,EAAf,EAAmB;IACjB5B,OAAO,CAAC6B,KAAR,CAAc,kDAAd;IACA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD;;AAED,SAASD,WAAT,GAAoB;EAClB,OAAOE,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,OAApC;AACD","names":["areCookiesAuthorized","buildConfiguration","setDebugMode","startInternalMonitoring","catchUserErrors","display","makePublicApi","stub","publicApi","onReady","callback","Object","defineProperty","get","enumerable","defineGlobal","global","name","api","existingGlobalVariable","q","forEach","fn","BuildMode","commonInit","initConfiguration","buildEnv","configuration","internalMonitoring","checkCookiesAuthorized","options","warn","checkIsNotLocalFile","isLocalFile","error","window","location","protocol"],"sourceRoot":"","sources":["../../src/boot/init.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}