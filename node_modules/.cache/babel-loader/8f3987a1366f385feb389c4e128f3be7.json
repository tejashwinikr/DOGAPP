{"ast":null,"code":"import { buildUrl } from '@datadog/browser-core';\nimport { CENSORED_STRING_MARK } from '../../constants';\nimport { shouldMaskNode } from './privacy';\nexport function hasSerializedNode(node) {\n  return '__sn' in node;\n}\nexport function nodeAndAncestorsHaveSerializedNode(node) {\n  var current = node;\n\n  while (current) {\n    if (!hasSerializedNode(current)) {\n      return false;\n    }\n\n    current = current.parentNode;\n  }\n\n  return true;\n}\nexport function getSerializedNodeId(node) {\n  return hasSerializedNode(node) ? node.__sn.id : undefined;\n}\nexport function setSerializedNode(node, serializeNode) {\n  ;\n  node.__sn = serializeNode;\n}\nvar URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")([^\"]*)\"|([^)]*))\\)/gm;\nvar ABSOLUTE_URL = /^[A-Za-z]+:|^\\/\\//;\nvar DATA_URI = /^data:.*,/i;\nexport function makeStylesheetUrlsAbsolute(cssText, baseUrl) {\n  return cssText.replace(URL_IN_CSS_REF, function (origin, quote1, path1, quote2, path2, path3) {\n    var filePath = path1 || path2 || path3;\n\n    if (!filePath || ABSOLUTE_URL.test(filePath) || DATA_URI.test(filePath)) {\n      return origin;\n    }\n\n    var maybeQuote = quote1 || quote2 || '';\n    return \"url(\" + maybeQuote + makeUrlAbsolute(filePath, baseUrl) + maybeQuote + \")\";\n  });\n}\nvar SRCSET_URLS = /(^\\s*|,\\s*)([^\\s,]+)/g;\nexport function makeSrcsetUrlsAbsolute(attributeValue, baseUrl) {\n  return attributeValue.replace(SRCSET_URLS, function (_, prefix, url) {\n    return \"\" + prefix + makeUrlAbsolute(url, baseUrl);\n  });\n}\nexport function makeUrlAbsolute(url, baseUrl) {\n  try {\n    return buildUrl(url.trim(), baseUrl).href;\n  } catch (_) {\n    return url;\n  }\n}\n/**\n * Get the element \"value\" to be serialized as an attribute or an input update record. It respects\n * the input privacy mode of the element.\n * PERFROMANCE OPTIMIZATION: Assumes that privacy level `HIDDEN` is never encountered because of earlier checks.\n */\n\nexport function getElementInputValue(element, nodePrivacyLevel) {\n  /*\n   BROWSER SPEC NOTE: <input>, <select>\n   For some <input> elements, the `value` is an exceptional property/attribute that has the\n   value synced between el.value and el.getAttribute()\n   input[type=button,checkbox,hidden,image,radio,reset,submit]\n   */\n  var tagName = element.tagName;\n  var value = element.value;\n\n  if (shouldMaskNode(element, nodePrivacyLevel)) {\n    var type = element.type;\n\n    if (tagName === 'INPUT' && (type === 'button' || type === 'submit' || type === 'reset')) {\n      // Overrule `MASK` privacy level for button-like element values, as they are used during replay\n      // to display their label. They can still be hidden via the \"hidden\" privacy attribute or class name.\n      return value;\n    } else if (!value || tagName === 'OPTION') {\n      // <Option> value provides no benefit\n      return;\n    }\n\n    return CENSORED_STRING_MARK;\n  }\n\n  if (tagName === 'OPTION' || tagName === 'SELECT') {\n    return element.value;\n  }\n\n  if (tagName !== 'INPUT' && tagName !== 'TEXTAREA') {\n    return;\n  }\n\n  return value;\n}","map":{"version":3,"mappings":"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","names":["buildUrl","CENSORED_STRING_MARK","shouldMaskNode","hasSerializedNode","node","nodeAndAncestorsHaveSerializedNode","current","parentNode","getSerializedNodeId","__sn","id","undefined","setSerializedNode","serializeNode","URL_IN_CSS_REF","ABSOLUTE_URL","DATA_URI","makeStylesheetUrlsAbsolute","cssText","baseUrl","replace","origin","quote1","path1","quote2","path2","path3","filePath","test","maybeQuote","makeUrlAbsolute","SRCSET_URLS","makeSrcsetUrlsAbsolute","attributeValue","_","prefix","url","trim","href","getElementInputValue","element","nodePrivacyLevel","tagName","value","type"],"sourceRoot":"","sources":["../../../src/domain/record/serializationUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}