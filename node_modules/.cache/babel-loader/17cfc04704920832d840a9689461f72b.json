{"ast":null,"code":"import { monitor, addErrorToMonitoringBatch, addMonitoringMessage } from '../domain/internalMonitoring';\nimport { generateUUID, includes } from '../tools/utils';\nvar hasReportedXhrError = false;\n/**\n * Use POST request without content type to:\n * - avoid CORS preflight requests\n * - allow usage of sendBeacon\n *\n * multiple elements are sent separated by \\n in order\n * to be parsed correctly without content type header\n */\n\nvar HttpRequest =\n/** @class */\nfunction () {\n  function HttpRequest(endpointUrl, bytesLimit, withBatchTime) {\n    if (withBatchTime === void 0) {\n      withBatchTime = false;\n    }\n\n    this.endpointUrl = endpointUrl;\n    this.bytesLimit = bytesLimit;\n    this.withBatchTime = withBatchTime;\n  }\n\n  HttpRequest.prototype.send = function (data, size) {\n    var url = addQueryParameter(this.endpointUrl, 'dd-request-id', generateUUID());\n\n    if (this.withBatchTime) {\n      url = addQueryParameter(url, 'batch_time', new Date().getTime().toString());\n    }\n\n    var tryBeacon = !!navigator.sendBeacon && size < this.bytesLimit;\n\n    if (tryBeacon) {\n      try {\n        var isQueued = navigator.sendBeacon(url, data);\n\n        if (isQueued) {\n          return;\n        }\n      } catch (e) {\n        reportBeaconError(e);\n      }\n    }\n\n    var transportIntrospection = function transportIntrospection(event) {\n      var req = event === null || event === void 0 ? void 0 : event.currentTarget;\n\n      if (req.status >= 200 && req.status < 300) {\n        return;\n      }\n\n      if (!hasReportedXhrError) {\n        hasReportedXhrError = true;\n        addMonitoringMessage('XHR fallback failed', {\n          on_line: navigator.onLine,\n          size: size,\n          url: url,\n          try_beacon: tryBeacon,\n          event: {\n            is_trusted: event.isTrusted,\n            total: event.total,\n            loaded: event.loaded\n          },\n          request: {\n            status: req.status,\n            ready_state: req.readyState,\n            response_text: req.responseText.slice(0, 64)\n          }\n        });\n      }\n    };\n\n    var request = new XMLHttpRequest();\n    request.addEventListener('loadend', monitor(function (event) {\n      return transportIntrospection(event);\n    }));\n    request.open('POST', url, true);\n    request.send(data);\n  };\n\n  return HttpRequest;\n}();\n\nexport { HttpRequest };\n\nfunction addQueryParameter(url, key, value) {\n  return \"\" + url + (includes(url, '?') ? '&' : '?') + key + \"=\" + value;\n}\n\nvar hasReportedBeaconError = false;\n\nfunction reportBeaconError(e) {\n  if (!hasReportedBeaconError) {\n    hasReportedBeaconError = true;\n    addErrorToMonitoringBatch(e);\n  }\n}","map":{"version":3,"mappings":"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","names":["monitor","addErrorToMonitoringBatch","addMonitoringMessage","generateUUID","includes","hasReportedXhrError","endpointUrl","bytesLimit","withBatchTime","HttpRequest","data","size","url","addQueryParameter","Date","getTime","toString","tryBeacon","navigator","sendBeacon","isQueued","e","reportBeaconError","transportIntrospection","event","req","currentTarget","status","on_line","onLine","try_beacon","is_trusted","isTrusted","total","loaded","request","ready_state","readyState","response_text","responseText","slice","XMLHttpRequest","addEventListener","open","send","key","value","hasReportedBeaconError"],"sourceRoot":"","sources":["../../src/transport/httpRequest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}