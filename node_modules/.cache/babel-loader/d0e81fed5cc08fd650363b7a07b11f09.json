{"ast":null,"code":"export var LifeCycleEventType;\n\n(function (LifeCycleEventType) {\n  LifeCycleEventType[LifeCycleEventType[\"PERFORMANCE_ENTRY_COLLECTED\"] = 0] = \"PERFORMANCE_ENTRY_COLLECTED\";\n  LifeCycleEventType[LifeCycleEventType[\"AUTO_ACTION_CREATED\"] = 1] = \"AUTO_ACTION_CREATED\";\n  LifeCycleEventType[LifeCycleEventType[\"AUTO_ACTION_COMPLETED\"] = 2] = \"AUTO_ACTION_COMPLETED\";\n  LifeCycleEventType[LifeCycleEventType[\"AUTO_ACTION_DISCARDED\"] = 3] = \"AUTO_ACTION_DISCARDED\";\n  LifeCycleEventType[LifeCycleEventType[\"VIEW_CREATED\"] = 4] = \"VIEW_CREATED\";\n  LifeCycleEventType[LifeCycleEventType[\"VIEW_UPDATED\"] = 5] = \"VIEW_UPDATED\";\n  LifeCycleEventType[LifeCycleEventType[\"VIEW_ENDED\"] = 6] = \"VIEW_ENDED\";\n  LifeCycleEventType[LifeCycleEventType[\"REQUEST_STARTED\"] = 7] = \"REQUEST_STARTED\";\n  LifeCycleEventType[LifeCycleEventType[\"REQUEST_COMPLETED\"] = 8] = \"REQUEST_COMPLETED\"; // The SESSION_EXPIRED lifecycle event has been introduced to represent when a session has expired\n  // and trigger cleanup tasks related to this, prior to renewing the session. Its implementation is\n  // slightly naive: it is not triggered as soon as the session is expired, but rather just before\n  // notifying that the session is renewed. Thus, the session id is already set to the newly renewed\n  // session.\n  //\n  // This implementation is \"good enough\" for our use-cases. Improving this is not trivial,\n  // primarily because multiple instances of the SDK may be managing the same session cookie at\n  // the same time, for example when using Logs and RUM on the same page, or opening multiple tabs\n  // on the same domain.\n\n  LifeCycleEventType[LifeCycleEventType[\"SESSION_EXPIRED\"] = 9] = \"SESSION_EXPIRED\";\n  LifeCycleEventType[LifeCycleEventType[\"SESSION_RENEWED\"] = 10] = \"SESSION_RENEWED\";\n  LifeCycleEventType[LifeCycleEventType[\"BEFORE_UNLOAD\"] = 11] = \"BEFORE_UNLOAD\";\n  LifeCycleEventType[LifeCycleEventType[\"RAW_RUM_EVENT_COLLECTED\"] = 12] = \"RAW_RUM_EVENT_COLLECTED\";\n  LifeCycleEventType[LifeCycleEventType[\"RUM_EVENT_COLLECTED\"] = 13] = \"RUM_EVENT_COLLECTED\";\n  LifeCycleEventType[LifeCycleEventType[\"RAW_ERROR_COLLECTED\"] = 14] = \"RAW_ERROR_COLLECTED\";\n})(LifeCycleEventType || (LifeCycleEventType = {}));\n\nvar LifeCycle =\n/** @class */\nfunction () {\n  function LifeCycle() {\n    this.callbacks = {};\n  }\n\n  LifeCycle.prototype.notify = function (eventType, data) {\n    var eventCallbacks = this.callbacks[eventType];\n\n    if (eventCallbacks) {\n      eventCallbacks.forEach(function (callback) {\n        return callback(data);\n      });\n    }\n  };\n\n  LifeCycle.prototype.subscribe = function (eventType, callback) {\n    var _this = this;\n\n    if (!this.callbacks[eventType]) {\n      this.callbacks[eventType] = [];\n    }\n\n    this.callbacks[eventType].push(callback);\n    return {\n      unsubscribe: function unsubscribe() {\n        _this.callbacks[eventType] = _this.callbacks[eventType].filter(function (other) {\n          return callback !== other;\n        });\n      }\n    };\n  };\n\n  return LifeCycle;\n}();\n\nexport { LifeCycle };","map":{"version":3,"mappings":"AASA,WAAYA,kBAAZ;;AAAA,WAAYA,kBAAZ,EAA8B;EAC5BA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA,sFAT4B,CAW5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAA;EAEAA;EACAA;EACAA;EACAA;EACAA;AACD,CA5BD,EAAYA,kBAAkB,KAAlBA,kBAAkB,MAA9B;;AA8BA;AAAA;AAAA;EAAA;IACU,iBAA0E,EAA1E;EA8ET;;EAvDCC,uCAAOC,SAAP,EAAsCC,IAAtC,EAAgD;IAC9C,IAAMC,cAAc,GAAG,KAAKC,SAAL,CAAeH,SAAf,CAAvB;;IACA,IAAIE,cAAJ,EAAoB;MAClBA,cAAc,CAACE,OAAf,CAAuB,UAACC,QAAD,EAAS;QAAK,eAAQ,CAACJ,IAAD,CAAR;MAAc,CAAnD;IACD;EACF,CALD;;EA4CAF,0CAAUC,SAAV,EAAyCK,QAAzC,EAAuE;IAAvE;;IACE,IAAI,CAAC,KAAKF,SAAL,CAAeH,SAAf,CAAL,EAAgC;MAC9B,KAAKG,SAAL,CAAeH,SAAf,IAA4B,EAA5B;IACD;;IACD,KAAKG,SAAL,CAAeH,SAAf,EAA2BM,IAA3B,CAAgCD,QAAhC;IACA,OAAO;MACLE,WAAW,EAAE;QACXC,KAAI,CAACL,SAAL,CAAeH,SAAf,IAA4BQ,KAAI,CAACL,SAAL,CAAeH,SAAf,EAA2BS,MAA3B,CAAkC,UAACC,KAAD,EAAM;UAAK,eAAQ,KAAKA,KAAb;QAAkB,CAA/D,CAA5B;MACD;IAHI,CAAP;EAKD,CAVD;;EAWF;AAAC,CA/ED","names":["LifeCycleEventType","LifeCycle","eventType","data","eventCallbacks","callbacks","forEach","callback","push","unsubscribe","_this","filter","other"],"sourceRoot":"","sources":["../../src/domain/lifeCycle.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}