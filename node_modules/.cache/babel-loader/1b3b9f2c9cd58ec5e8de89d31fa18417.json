{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { display } from '../tools/display';\nimport { toStackTraceString } from '../tools/error';\nimport { assign, combine, jsonStringify } from '../tools/utils';\nimport { Batch, HttpRequest } from '../transport';\nimport { computeStackTrace } from './tracekit';\nvar StatusType;\n\n(function (StatusType) {\n  StatusType[\"info\"] = \"info\";\n  StatusType[\"error\"] = \"error\";\n})(StatusType || (StatusType = {}));\n\nvar monitoringConfiguration = {\n  maxMessagesPerPage: 0,\n  sentMessageCount: 0\n};\nvar externalContextProvider;\nexport function startInternalMonitoring(configuration) {\n  if (configuration.internalMonitoringEndpoint) {\n    var batch = startMonitoringBatch(configuration);\n    assign(monitoringConfiguration, {\n      batch: batch,\n      maxMessagesPerPage: configuration.maxInternalMonitoringMessagesPerPage,\n      sentMessageCount: 0\n    });\n  }\n\n  return {\n    setExternalContextProvider: function setExternalContextProvider(provider) {\n      externalContextProvider = provider;\n    }\n  };\n}\n\nfunction startMonitoringBatch(configuration) {\n  var primaryBatch = createMonitoringBatch(configuration.internalMonitoringEndpoint);\n  var replicaBatch;\n\n  if (configuration.replica !== undefined) {\n    replicaBatch = createMonitoringBatch(configuration.replica.internalMonitoringEndpoint);\n  }\n\n  function createMonitoringBatch(endpointUrl) {\n    return new Batch(new HttpRequest(endpointUrl, configuration.batchBytesLimit), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout);\n  }\n\n  function withContext(message) {\n    return combine({\n      date: new Date().getTime(),\n      view: {\n        referrer: document.referrer,\n        url: window.location.href\n      }\n    }, externalContextProvider !== undefined ? externalContextProvider() : {}, message);\n  }\n\n  return {\n    add: function add(message) {\n      var contextualizedMessage = withContext(message);\n      primaryBatch.add(contextualizedMessage);\n\n      if (replicaBatch) {\n        replicaBatch.add(contextualizedMessage);\n      }\n    }\n  };\n}\n\nexport function resetInternalMonitoring() {\n  monitoringConfiguration.batch = undefined;\n}\nexport function monitored(_, __, descriptor) {\n  var originalMethod = descriptor.value;\n\n  descriptor.value = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var decorated = monitoringConfiguration.batch ? monitor(originalMethod) : originalMethod;\n    return decorated.apply(this, args);\n  };\n}\nexport function monitor(fn) {\n  return function () {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return callMonitored(fn, this, arguments);\n  }; // consider output type has input type\n}\nexport function callMonitored(fn, context, args) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fn.apply(context, args);\n  } catch (e) {\n    logErrorIfDebug(e);\n\n    try {\n      addErrorToMonitoringBatch(e);\n    } catch (e) {\n      logErrorIfDebug(e);\n    }\n  }\n}\nexport function addMonitoringMessage(message, context) {\n  logMessageIfDebug(message, context);\n  addToMonitoringBatch(__assign(__assign({\n    message: message\n  }, context), {\n    status: StatusType.info\n  }));\n}\nexport function addErrorToMonitoringBatch(e) {\n  addToMonitoringBatch(__assign(__assign({}, formatError(e)), {\n    status: StatusType.error\n  }));\n}\n\nfunction addToMonitoringBatch(message) {\n  if (monitoringConfiguration.batch && monitoringConfiguration.sentMessageCount < monitoringConfiguration.maxMessagesPerPage) {\n    monitoringConfiguration.sentMessageCount += 1;\n    monitoringConfiguration.batch.add(message);\n  }\n}\n\nfunction formatError(e) {\n  if (e instanceof Error) {\n    var stackTrace = computeStackTrace(e);\n    return {\n      error: {\n        kind: stackTrace.name,\n        stack: toStackTraceString(stackTrace)\n      },\n      message: stackTrace.message\n    };\n  }\n\n  return {\n    error: {\n      stack: 'Not an instance of error'\n    },\n    message: \"Uncaught \" + jsonStringify(e)\n  };\n}\n\nexport function setDebugMode(debugMode) {\n  monitoringConfiguration.debugMode = debugMode;\n}\n\nfunction logErrorIfDebug(e) {\n  if (monitoringConfiguration.debugMode) {\n    display.error('[INTERNAL ERROR]', e);\n  }\n}\n\nfunction logMessageIfDebug(message, context) {\n  if (monitoringConfiguration.debugMode) {\n    display.log('[MONITORING MESSAGE]', message, context);\n  }\n}","map":{"version":3,"mappings":"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","names":["display","toStackTraceString","assign","combine","jsonStringify","Batch","HttpRequest","computeStackTrace","StatusType","monitoringConfiguration","maxMessagesPerPage","sentMessageCount","externalContextProvider","startInternalMonitoring","configuration","internalMonitoringEndpoint","batch","startMonitoringBatch","maxInternalMonitoringMessagesPerPage","setExternalContextProvider","provider","primaryBatch","createMonitoringBatch","replicaBatch","replica","undefined","endpointUrl","batchBytesLimit","maxBatchSize","maxMessageSize","flushTimeout","withContext","message","date","Date","getTime","view","referrer","document","url","window","location","href","add","contextualizedMessage","resetInternalMonitoring","monitored","_","__","descriptor","originalMethod","value","args","decorated","monitor","apply","fn","callMonitored","arguments","context","e","logErrorIfDebug","addErrorToMonitoringBatch","addMonitoringMessage","logMessageIfDebug","addToMonitoringBatch","status","info","formatError","error","Error","stackTrace","kind","name","stack","setDebugMode","debugMode","log"],"sourceRoot":"","sources":["../../src/domain/internalMonitoring.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}