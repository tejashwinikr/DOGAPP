{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { callMonitored, monitor } from '../domain/internalMonitoring';\nimport { elapsed, relativeNow, clocksNow, timeStampNow } from '../tools/timeUtils';\nimport { normalizeUrl } from '../tools/urlPolyfill';\nvar xhrProxySingleton;\nvar beforeSendCallbacks = [];\nvar onRequestCompleteCallbacks = [];\nvar originalXhrOpen;\nvar originalXhrSend;\nvar originalXhrAbort;\nexport function startXhrProxy() {\n  if (!xhrProxySingleton) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalXhrOpen = XMLHttpRequest.prototype.open; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    originalXhrSend = XMLHttpRequest.prototype.send; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n    originalXhrAbort = XMLHttpRequest.prototype.abort;\n    XMLHttpRequest.prototype.open = openXhr;\n    XMLHttpRequest.prototype.send = sendXhr;\n    XMLHttpRequest.prototype.abort = abortXhr;\n    xhrProxySingleton = {\n      beforeSend: function beforeSend(callback) {\n        beforeSendCallbacks.push(callback);\n      },\n      onRequestComplete: function onRequestComplete(callback) {\n        onRequestCompleteCallbacks.push(callback);\n      }\n    };\n  }\n\n  return xhrProxySingleton;\n}\nexport function resetXhrProxy() {\n  if (xhrProxySingleton) {\n    xhrProxySingleton = undefined;\n    beforeSendCallbacks.length = 0;\n    onRequestCompleteCallbacks.length = 0;\n    XMLHttpRequest.prototype.open = originalXhrOpen;\n    XMLHttpRequest.prototype.send = originalXhrSend;\n    XMLHttpRequest.prototype.abort = originalXhrAbort;\n  }\n}\n\nfunction openXhr(method, url) {\n  var _this = this;\n\n  callMonitored(function () {\n    // WARN: since this data structure is tied to the instance, it is shared by both logs and rum\n    // and can be used by different code versions depending on customer setup\n    // so it should stay compatible with older versions\n    _this._datadog_xhr = {\n      method: method,\n      url: normalizeUrl(url)\n    };\n  });\n  return originalXhrOpen.apply(this, arguments);\n}\n\nfunction sendXhr() {\n  var _this = this;\n\n  callMonitored(function () {\n    if (!_this._datadog_xhr) {\n      return;\n    }\n\n    _this._datadog_xhr.startTime = relativeNow();\n    _this._datadog_xhr.startClocks = clocksNow();\n    _this._datadog_xhr.isAborted = false;\n    var hasBeenReported = false;\n    var originalOnreadystatechange = _this.onreadystatechange;\n\n    var onreadystatechange = function onreadystatechange() {\n      if (this.readyState === XMLHttpRequest.DONE) {\n        // Try to report the XHR as soon as possible, because the XHR may be mutated by the\n        // application during a future event. For example, Angular is calling .abort() on\n        // completed requests during a onreadystatechange event, so the status becomes '0'\n        // before the request is collected.\n        onEnd();\n      }\n\n      if (originalOnreadystatechange) {\n        originalOnreadystatechange.apply(this, arguments);\n      }\n    };\n\n    var onEnd = monitor(function () {\n      _this.removeEventListener('loadend', onEnd); // if the onreadystatechange hasn't been overridden by the user after the send()\n\n\n      if (_this.onreadystatechange === onreadystatechange) {\n        _this.onreadystatechange = originalOnreadystatechange;\n      }\n\n      if (hasBeenReported) {\n        return;\n      }\n\n      hasBeenReported = true;\n      reportXhr(_this);\n    });\n    _this.onreadystatechange = onreadystatechange;\n\n    _this.addEventListener('loadend', onEnd);\n\n    beforeSendCallbacks.forEach(function (callback) {\n      return callback(_this._datadog_xhr, _this);\n    });\n  });\n  return originalXhrSend.apply(this, arguments);\n}\n\nfunction abortXhr() {\n  var _this = this;\n\n  callMonitored(function () {\n    if (_this._datadog_xhr) {\n      _this._datadog_xhr.isAborted = true;\n    }\n  });\n  return originalXhrAbort.apply(this, arguments);\n}\n\nfunction reportXhr(xhr) {\n  xhr._datadog_xhr.duration = elapsed(xhr._datadog_xhr.startClocks.timeStamp, timeStampNow());\n  xhr._datadog_xhr.responseText = xhr.response;\n  xhr._datadog_xhr.status = xhr.status;\n  xhr._datadog_xhr.xhr = xhr;\n  onRequestCompleteCallbacks.forEach(function (callback) {\n    return callback(__assign({}, xhr._datadog_xhr));\n  });\n}","map":{"version":3,"mappings":"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","names":["callMonitored","monitor","elapsed","relativeNow","clocksNow","timeStampNow","normalizeUrl","xhrProxySingleton","beforeSendCallbacks","onRequestCompleteCallbacks","originalXhrOpen","originalXhrSend","originalXhrAbort","startXhrProxy","XMLHttpRequest","prototype","open","send","abort","openXhr","sendXhr","abortXhr","beforeSend","callback","push","onRequestComplete","resetXhrProxy","undefined","length","method","url","_this","_datadog_xhr","apply","arguments","startTime","startClocks","isAborted","hasBeenReported","originalOnreadystatechange","onreadystatechange","readyState","DONE","onEnd","removeEventListener","reportXhr","addEventListener","forEach","xhr","duration","timeStamp","responseText","response","status"],"sourceRoot":"","sources":["../../src/browser/xhrProxy.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}