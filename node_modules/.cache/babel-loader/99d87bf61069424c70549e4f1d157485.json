{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { addEventListeners, elapsed, ONE_DAY, addMonitoringMessage, relativeNow, timeStampNow } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { getSleepDuration } from '../../trackSleep';\nimport { trackFirstHidden } from './trackFirstHidden';\nexport function trackInitialViewTimings(lifeCycle, callback) {\n  var timings;\n\n  function setTimings(newTimings) {\n    timings = __assign(__assign({}, timings), newTimings);\n    callback(timings);\n  }\n\n  var stopNavigationTracking = trackNavigationTimings(lifeCycle, setTimings).stop;\n  var stopFCPTracking = trackFirstContentfulPaint(lifeCycle, function (firstContentfulPaint) {\n    return setTimings({\n      firstContentfulPaint: firstContentfulPaint\n    });\n  }).stop;\n  var stopLCPTracking = trackLargestContentfulPaint(lifeCycle, window, function (largestContentfulPaint) {\n    setTimings({\n      largestContentfulPaint: largestContentfulPaint\n    });\n  }).stop;\n  var stopFIDTracking = trackFirstInputTimings(lifeCycle, function (_a) {\n    var firstInputDelay = _a.firstInputDelay,\n        firstInputTime = _a.firstInputTime;\n    setTimings({\n      firstInputDelay: firstInputDelay,\n      firstInputTime: firstInputTime\n    });\n  }).stop;\n  return {\n    stop: function stop() {\n      stopNavigationTracking();\n      stopFCPTracking();\n      stopLCPTracking();\n      stopFIDTracking();\n    }\n  };\n}\nexport function trackNavigationTimings(lifeCycle, callback) {\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'navigation') {\n      callback({\n        domComplete: entry.domComplete,\n        domContentLoaded: entry.domContentLoadedEventEnd,\n        domInteractive: entry.domInteractive,\n        loadEvent: entry.loadEventEnd\n      });\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\nexport function trackFirstContentfulPaint(lifeCycle, callback) {\n  var fcpCount = 0;\n  var firstHidden = trackFirstHidden();\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint' && entry.startTime < firstHidden.timeStamp) {\n      fcpCount += 1;\n\n      if (entry.startTime > ONE_DAY) {\n        addMonitoringMessage('FCP > 1 day', {\n          debug: {\n            fcp: Math.round(entry.startTime),\n            relativeNow: Math.round(relativeNow()),\n            timeStampNow: timeStampNow(),\n            sleepDuration: getSleepDuration(),\n            fcpCount: fcpCount\n          }\n        });\n      }\n\n      callback(entry.startTime);\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}\n/**\n * Track the largest contentful paint (LCP) occurring during the initial View.  This can yield\n * multiple values, only the most recent one should be used.\n * Documentation: https://web.dev/lcp/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getLCP.ts\n */\n\nexport function trackLargestContentfulPaint(lifeCycle, emitter, callback) {\n  var firstHidden = trackFirstHidden(); // Ignore entries that come after the first user interaction.  According to the documentation, the\n  // browser should not send largest-contentful-paint entries after a user interact with the page,\n  // but the web-vitals reference implementation uses this as a safeguard.\n\n  var firstInteractionTimestamp = Infinity;\n  var stopEventListener = addEventListeners(emitter, [\"pointerdown\"\n  /* POINTER_DOWN */\n  , \"keydown\"\n  /* KEY_DOWN */\n  ], function (event) {\n    firstInteractionTimestamp = event.timeStamp;\n  }, {\n    capture: true,\n    once: true\n  }).stop;\n  var lcpSizes = [];\n  var unsubscribeLifeCycle = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'largest-contentful-paint' && entry.startTime < firstInteractionTimestamp && entry.startTime < firstHidden.timeStamp) {\n      lcpSizes.push({\n        timeStamp: timeStampNow(),\n        startTime: entry.startTime,\n        size: entry.size\n      });\n\n      if (entry.startTime > ONE_DAY) {\n        addMonitoringMessage('LCP > 1 day', {\n          debug: {\n            lcp: Math.round(entry.startTime),\n            relativeNow: Math.round(relativeNow()),\n            timeStampNow: timeStampNow(),\n            sleepDuration: getSleepDuration(),\n            lcpSizes: lcpSizes\n          }\n        });\n      }\n\n      callback(entry.startTime);\n    }\n  }).unsubscribe;\n  return {\n    stop: function stop() {\n      stopEventListener();\n      unsubscribeLifeCycle();\n    }\n  };\n}\n/**\n * Track the first input occurring during the initial View to return:\n * - First Input Delay\n * - First Input Time\n * Callback is called at most one time.\n * Documentation: https://web.dev/fid/\n * Reference implementation: https://github.com/GoogleChrome/web-vitals/blob/master/src/getFID.ts\n */\n\nexport function trackFirstInputTimings(lifeCycle, callback) {\n  var firstHidden = trackFirstHidden();\n  var stop = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'first-input' && entry.startTime < firstHidden.timeStamp) {\n      var firstInputDelay = elapsed(entry.startTime, entry.processingStart);\n      callback({\n        // Ensure firstInputDelay to be positive, see\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=1185815\n        firstInputDelay: firstInputDelay >= 0 ? firstInputDelay : 0,\n        firstInputTime: entry.startTime\n      });\n    }\n  }).unsubscribe;\n  return {\n    stop: stop\n  };\n}","map":{"version":3,"mappings":"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","names":["addEventListeners","elapsed","ONE_DAY","addMonitoringMessage","relativeNow","timeStampNow","LifeCycleEventType","getSleepDuration","trackFirstHidden","trackInitialViewTimings","lifeCycle","callback","timings","setTimings","newTimings","stopNavigationTracking","trackNavigationTimings","stop","stopFCPTracking","trackFirstContentfulPaint","firstContentfulPaint","stopLCPTracking","trackLargestContentfulPaint","window","largestContentfulPaint","stopFIDTracking","trackFirstInputTimings","_a","firstInputDelay","firstInputTime","subscribe","PERFORMANCE_ENTRY_COLLECTED","entry","entryType","domComplete","domContentLoaded","domContentLoadedEventEnd","domInteractive","loadEvent","loadEventEnd","unsubscribe","fcpCount","firstHidden","name","startTime","timeStamp","debug","fcp","Math","round","sleepDuration","emitter","firstInteractionTimestamp","Infinity","stopEventListener","event","capture","once","lcpSizes","unsubscribeLifeCycle","push","size","lcp","processingStart"],"sourceRoot":"","sources":["../../../../src/domain/rumEventsCollection/view/trackInitialViewTimings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}