{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { combine, generateUUID, RequestType, ResourceType, toServerDuration, relativeToClocks } from '@datadog/browser-core';\nimport { supportPerformanceEntry } from '../../../browser/performanceCollection';\nimport { RumEventType } from '../../../rawRumEvent.types';\nimport { LifeCycleEventType } from '../../lifeCycle';\nimport { getSleepDuration } from '../../trackSleep';\nimport { matchRequestTiming } from './matchRequestTiming';\nimport { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isRequestKind } from './resourceUtils';\nexport function startResourceCollection(lifeCycle) {\n  lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {\n    lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processRequest(request));\n  });\n  lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'resource' && !isRequestKind(entry)) {\n      lifeCycle.notify(LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, processResourceEntry(entry));\n    }\n  });\n}\n\nfunction processRequest(request) {\n  var type = request.type === RequestType.XHR ? ResourceType.XHR : ResourceType.FETCH;\n  var matchingTiming = matchRequestTiming(request);\n  var startClocks = matchingTiming ? relativeToClocks(matchingTiming.startTime) : request.startClocks;\n  var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined;\n  var tracingInfo = computeRequestTracingInfo(request);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      duration: toServerDuration(request.duration),\n      method: request.method,\n      status_code: request.status,\n      url: request.url\n    },\n    type: RumEventType.RESOURCE\n  }, tracingInfo, correspondingTimingOverrides, computeSleepInfo(startClocks.timeStamp));\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: matchingTiming && toPerformanceEntryRepresentation(matchingTiming),\n      xhr: request.xhr,\n      response: request.response,\n      requestInput: request.input,\n      requestInit: request.init,\n      error: request.error\n    }\n  };\n}\n\nfunction processResourceEntry(entry) {\n  var type = computeResourceKind(entry);\n  var entryMetrics = computePerformanceEntryMetrics(entry);\n  var tracingInfo = computeEntryTracingInfo(entry);\n  var startClocks = relativeToClocks(entry.startTime);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      url: entry.name\n    },\n    type: RumEventType.RESOURCE\n  }, tracingInfo, entryMetrics, computeSleepInfo(startClocks.timeStamp));\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: toPerformanceEntryRepresentation(entry)\n    }\n  };\n}\n\nfunction computePerformanceEntryMetrics(timing) {\n  return {\n    resource: __assign({\n      duration: computePerformanceResourceDuration(timing),\n      size: computeSize(timing)\n    }, computePerformanceResourceDetails(timing))\n  };\n}\n\nfunction computeRequestTracingInfo(request) {\n  var hasBeenTraced = request.traceId && request.spanId;\n\n  if (!hasBeenTraced) {\n    return undefined;\n  }\n\n  return {\n    _dd: {\n      span_id: request.spanId.toDecimalString(),\n      trace_id: request.traceId.toDecimalString()\n    }\n  };\n}\n\nfunction computeEntryTracingInfo(entry) {\n  return entry.traceId ? {\n    _dd: {\n      trace_id: entry.traceId\n    }\n  } : undefined;\n}\n\nfunction computeSleepInfo(date) {\n  var sleepDuration = getSleepDuration(date);\n\n  if (sleepDuration > 0) {\n    return {\n      _dd: {\n        sleep_duration: sleepDuration\n      }\n    };\n  }\n}\n\nfunction toPerformanceEntryRepresentation(entry) {\n  if (supportPerformanceEntry() && entry instanceof PerformanceEntry) {\n    entry.toJSON();\n  }\n\n  return entry;\n}","map":{"version":3,"mappings":"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","names":["combine","generateUUID","RequestType","ResourceType","toServerDuration","relativeToClocks","supportPerformanceEntry","RumEventType","LifeCycleEventType","getSleepDuration","matchRequestTiming","computePerformanceResourceDetails","computePerformanceResourceDuration","computeResourceKind","computeSize","isRequestKind","startResourceCollection","lifeCycle","subscribe","REQUEST_COMPLETED","request","notify","RAW_RUM_EVENT_COLLECTED","processRequest","PERFORMANCE_ENTRY_COLLECTED","entry","entryType","processResourceEntry","type","XHR","FETCH","matchingTiming","startClocks","startTime","correspondingTimingOverrides","computePerformanceEntryMetrics","undefined","tracingInfo","computeRequestTracingInfo","resourceEvent","date","timeStamp","resource","id","duration","method","status_code","status","url","RESOURCE","computeSleepInfo","relative","rawRumEvent","domainContext","performanceEntry","toPerformanceEntryRepresentation","xhr","response","requestInput","input","requestInit","init","error","entryMetrics","computeEntryTracingInfo","name","timing","size","hasBeenTraced","traceId","spanId","_dd","span_id","toDecimalString","trace_id","sleepDuration","sleep_duration","PerformanceEntry","toJSON"],"sourceRoot":"","sources":["../../../../src/domain/rumEventsCollection/resource/resourceCollection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}