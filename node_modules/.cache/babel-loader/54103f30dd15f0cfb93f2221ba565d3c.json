{"ast":null,"code":"import { monitor, noop } from '@datadog/browser-core';\nimport { getMutationObserverConstructor } from '@datadog/browser-rum-core';\nimport { NodePrivacyLevel } from '../../constants';\nimport { getNodePrivacyLevel, getTextContent } from './privacy';\nimport { getElementInputValue, getSerializedNodeId, hasSerializedNode, nodeAndAncestorsHaveSerializedNode } from './serializationUtils';\nimport { serializeNodeWithId, serializeAttribute } from './serialize';\nimport { forEach } from './utils';\nimport { createMutationBatch } from './mutationBatch';\n/**\n * Buffers and aggregate mutations generated by a MutationObserver into MutationPayload\n */\n\nexport function startMutationObserver(controller, mutationCallback, initialPrivacyLevel) {\n  var MutationObserver = getMutationObserverConstructor();\n\n  if (!MutationObserver) {\n    return {\n      stop: noop\n    };\n  }\n\n  var mutationBatch = createMutationBatch(function (mutations) {\n    processMutations(mutations.concat(observer.takeRecords()), mutationCallback, initialPrivacyLevel);\n  });\n  var observer = new MutationObserver(monitor(mutationBatch.addMutations));\n  observer.observe(document, {\n    attributeOldValue: true,\n    attributes: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  });\n  controller.onFlush(mutationBatch.flush);\n  return {\n    stop: function stop() {\n      observer.disconnect();\n      mutationBatch.stop();\n    }\n  };\n}\n/**\n * Controls how mutations are processed, allowing to flush pending mutations.\n */\n\nvar MutationController =\n/** @class */\nfunction () {\n  function MutationController() {}\n\n  MutationController.prototype.flush = function () {\n    var _a;\n\n    (_a = this.flushListener) === null || _a === void 0 ? void 0 : _a.call(this);\n  };\n\n  MutationController.prototype.onFlush = function (listener) {\n    this.flushListener = listener;\n  };\n\n  return MutationController;\n}();\n\nexport { MutationController };\n\nfunction processMutations(mutations, mutationCallback, initialPrivacyLevel) {\n  // Discard any mutation with a 'target' node that:\n  // * isn't injected in the current document or isn't known/serialized yet: those nodes are likely\n  // part of a mutation occurring in a parent Node\n  // * should be hidden or ignored\n  var filteredMutations = mutations.filter(function (mutation) {\n    return document.contains(mutation.target) && nodeAndAncestorsHaveSerializedNode(mutation.target) && getNodePrivacyLevel(mutation.target, initialPrivacyLevel) !== NodePrivacyLevel.HIDDEN;\n  });\n\n  var _a = processChildListMutations(filteredMutations.filter(function (mutation) {\n    return mutation.type === 'childList';\n  }), initialPrivacyLevel),\n      adds = _a.adds,\n      removes = _a.removes,\n      hasBeenSerialized = _a.hasBeenSerialized;\n\n  var texts = processCharacterDataMutations(filteredMutations.filter(function (mutation) {\n    return mutation.type === 'characterData' && !hasBeenSerialized(mutation.target);\n  }), initialPrivacyLevel);\n  var attributes = processAttributesMutations(filteredMutations.filter(function (mutation) {\n    return mutation.type === 'attributes' && !hasBeenSerialized(mutation.target);\n  }), initialPrivacyLevel);\n\n  if (!texts.length && !attributes.length && !removes.length && !adds.length) {\n    return;\n  }\n\n  mutationCallback({\n    adds: adds,\n    removes: removes,\n    texts: texts,\n    attributes: attributes\n  });\n}\n\nfunction processChildListMutations(mutations, initialPrivacyLevel) {\n  // First, we iterate over mutations to collect:\n  //\n  // * nodes that have been added in the document and not removed by a subsequent mutation\n  // * nodes that have been removed from the document but were not added in a previous mutation\n  //\n  // For this second category, we also collect their previous parent (mutation.target) because we'll\n  // need it to emit a 'remove' mutation.\n  //\n  // Those two categories may overlap: if a node moved from a position to another, it is reported as\n  // two mutation records, one with a \"removedNodes\" and the other with \"addedNodes\". In this case,\n  // the node will be in both sets.\n  var addedAndMovedNodes = new Set();\n  var removedNodes = new Map();\n\n  var _loop_1 = function _loop_1(mutation) {\n    forEach(mutation.addedNodes, function (node) {\n      addedAndMovedNodes.add(node);\n    });\n    forEach(mutation.removedNodes, function (node) {\n      if (!addedAndMovedNodes.has(node)) {\n        removedNodes.set(node, mutation.target);\n      }\n\n      addedAndMovedNodes.delete(node);\n    });\n  };\n\n  for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {\n    var mutation = mutations_1[_i];\n\n    _loop_1(mutation);\n  } // Then, we sort nodes that are still in the document by topological order, for two reasons:\n  //\n  // * We will serialize each added nodes with their descendants. We don't want to serialize a node\n  // twice, so we need to iterate over the parent nodes first and skip any node that is contained in\n  // a precedent node.\n  //\n  // * To emit \"add\" mutations, we need references to the parent and potential next sibling of each\n  // added node. So we need to iterate over the parent nodes first, and when multiple nodes are\n  // siblings, we want to iterate from last to first. This will ensure that any \"next\" node is\n  // already serialized and have an id.\n\n\n  var sortedAddedAndMovedNodes = Array.from(addedAndMovedNodes);\n  sortAddedAndMovedNodes(sortedAddedAndMovedNodes); // Then, we iterate over our sorted node sets to emit mutations. We collect the newly serialized\n  // node ids in a set to be able to skip subsequent related mutations.\n\n  var serializedNodeIds = new Set();\n  var addedNodeMutations = [];\n\n  for (var _a = 0, sortedAddedAndMovedNodes_1 = sortedAddedAndMovedNodes; _a < sortedAddedAndMovedNodes_1.length; _a++) {\n    var node = sortedAddedAndMovedNodes_1[_a];\n\n    if (hasBeenSerialized(node)) {\n      continue;\n    }\n\n    var parentNodePrivacyLevel = getNodePrivacyLevel(node.parentNode, initialPrivacyLevel);\n\n    if (parentNodePrivacyLevel === NodePrivacyLevel.HIDDEN || parentNodePrivacyLevel === NodePrivacyLevel.IGNORE) {\n      continue;\n    }\n\n    var serializedNode = serializeNodeWithId(node, {\n      document: document,\n      serializedNodeIds: serializedNodeIds,\n      parentNodePrivacyLevel: parentNodePrivacyLevel\n    });\n\n    if (!serializedNode) {\n      continue;\n    }\n\n    addedNodeMutations.push({\n      nextId: getNextSibling(node),\n      parentId: getSerializedNodeId(node.parentNode),\n      node: serializedNode\n    });\n  } // Finally, we emit remove mutations.\n\n\n  var removedNodeMutations = [];\n  removedNodes.forEach(function (parent, node) {\n    if (hasSerializedNode(node)) {\n      removedNodeMutations.push({\n        parentId: getSerializedNodeId(parent),\n        id: getSerializedNodeId(node)\n      });\n    }\n  });\n  return {\n    adds: addedNodeMutations,\n    removes: removedNodeMutations,\n    hasBeenSerialized: hasBeenSerialized\n  };\n\n  function hasBeenSerialized(node) {\n    return hasSerializedNode(node) && serializedNodeIds.has(getSerializedNodeId(node));\n  }\n\n  function getNextSibling(node) {\n    var nextSibling = node.nextSibling;\n\n    while (nextSibling) {\n      if (hasSerializedNode(nextSibling)) {\n        return getSerializedNodeId(nextSibling);\n      }\n\n      nextSibling = nextSibling.nextSibling;\n    }\n\n    return null;\n  }\n}\n\nfunction processCharacterDataMutations(mutations, initialPrivacyLevel) {\n  var _a;\n\n  var textMutations = []; // Deduplicate mutations based on their target node\n\n  var handledNodes = new Set();\n  var filteredMutations = mutations.filter(function (mutation) {\n    if (handledNodes.has(mutation.target)) {\n      return false;\n    }\n\n    handledNodes.add(mutation.target);\n    return true;\n  }); // Emit mutations\n\n  for (var _i = 0, filteredMutations_1 = filteredMutations; _i < filteredMutations_1.length; _i++) {\n    var mutation = filteredMutations_1[_i];\n    var value = mutation.target.textContent;\n\n    if (value === mutation.oldValue) {\n      continue;\n    }\n\n    textMutations.push({\n      id: getSerializedNodeId(mutation.target),\n      // TODO: pass a valid \"ignoreWhiteSpace\" argument\n      value: (_a = getTextContent(mutation.target, false, initialPrivacyLevel)) !== null && _a !== void 0 ? _a : null\n    });\n  }\n\n  return textMutations;\n}\n\nfunction processAttributesMutations(mutations, initialPrivacyLevel) {\n  var attributeMutations = []; // Deduplicate mutations based on their target node and changed attribute\n\n  var handledElements = new Map();\n  var filteredMutations = mutations.filter(function (mutation) {\n    var handledAttributes = handledElements.get(mutation.target);\n\n    if (handledAttributes === null || handledAttributes === void 0 ? void 0 : handledAttributes.has(mutation.attributeName)) {\n      return false;\n    }\n\n    if (!handledAttributes) {\n      handledElements.set(mutation.target, new Set([mutation.attributeName]));\n    } else {\n      handledAttributes.add(mutation.attributeName);\n    }\n\n    return true;\n  }); // Emit mutations\n\n  var emittedMutations = new Map();\n\n  for (var _i = 0, filteredMutations_2 = filteredMutations; _i < filteredMutations_2.length; _i++) {\n    var mutation = filteredMutations_2[_i];\n    var uncensoredValue = mutation.target.getAttribute(mutation.attributeName);\n\n    if (uncensoredValue === mutation.oldValue) {\n      continue;\n    }\n\n    var privacyLevel = getNodePrivacyLevel(mutation.target, initialPrivacyLevel);\n    var attributeValue = serializeAttribute(mutation.target, privacyLevel, mutation.attributeName);\n    var transformedValue = void 0;\n\n    if (mutation.attributeName === 'value') {\n      var inputValue = getElementInputValue(mutation.target, privacyLevel);\n\n      if (inputValue === undefined) {\n        continue;\n      }\n\n      transformedValue = inputValue;\n    } else if (attributeValue && typeof attributeValue === 'string') {\n      transformedValue = attributeValue;\n    } else {\n      transformedValue = null;\n    }\n\n    var emittedMutation = emittedMutations.get(mutation.target);\n\n    if (!emittedMutation) {\n      emittedMutation = {\n        id: getSerializedNodeId(mutation.target),\n        attributes: {}\n      };\n      attributeMutations.push(emittedMutation);\n      emittedMutations.set(mutation.target, emittedMutation);\n    }\n\n    emittedMutation.attributes[mutation.attributeName] = transformedValue;\n  }\n\n  return attributeMutations;\n}\n\nexport function sortAddedAndMovedNodes(nodes) {\n  nodes.sort(function (a, b) {\n    var position = a.compareDocumentPosition(b);\n    /* eslint-disable no-bitwise */\n\n    if (position & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      return -1;\n    } else if (position & Node.DOCUMENT_POSITION_CONTAINS) {\n      return 1;\n    } else if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\n      return 1;\n    } else if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      return -1;\n    }\n    /* eslint-enable no-bitwise */\n\n\n    return 0;\n  });\n}","map":{"version":3,"mappings":"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","names":["monitor","noop","getMutationObserverConstructor","NodePrivacyLevel","getNodePrivacyLevel","getTextContent","getElementInputValue","getSerializedNodeId","hasSerializedNode","nodeAndAncestorsHaveSerializedNode","serializeNodeWithId","serializeAttribute","forEach","createMutationBatch","startMutationObserver","controller","mutationCallback","initialPrivacyLevel","MutationObserver","stop","mutationBatch","mutations","processMutations","concat","observer","takeRecords","addMutations","observe","document","attributeOldValue","attributes","characterData","characterDataOldValue","childList","subtree","onFlush","flush","disconnect","MutationController","flushListener","_a","listener","filteredMutations","filter","mutation","contains","target","HIDDEN","processChildListMutations","type","adds","removes","hasBeenSerialized","texts","processCharacterDataMutations","processAttributesMutations","length","addedAndMovedNodes","Set","removedNodes","Map","addedNodes","node","add","has","set","delete","_i","sortedAddedAndMovedNodes","Array","from","sortAddedAndMovedNodes","serializedNodeIds","addedNodeMutations","parentNodePrivacyLevel","parentNode","IGNORE","serializedNode","push","nextId","getNextSibling","parentId","removedNodeMutations","parent","id","nextSibling","textMutations","handledNodes","value","textContent","oldValue","attributeMutations","handledElements","handledAttributes","get","attributeName","emittedMutations","uncensoredValue","getAttribute","privacyLevel","attributeValue","transformedValue","inputValue","undefined","emittedMutation","nodes","sort","a","b","position","compareDocumentPosition","Node","DOCUMENT_POSITION_CONTAINED_BY","DOCUMENT_POSITION_CONTAINS","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING"],"sourceRoot":"","sources":["../../../src/domain/record/mutationObserver.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}