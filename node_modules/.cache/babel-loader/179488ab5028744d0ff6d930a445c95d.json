{"ast":null,"code":"import { monitor, noop } from '@datadog/browser-core';\n/**\n * Maximum duration to wait before processing mutations. If the browser is idle, mutations will be\n * processed more quickly. If the browser is busy executing small tasks (ex: rendering frames), the\n * mutations will wait MUTATION_PROCESS_MAX_DELAY milliseconds before being processed. If the\n * browser is busy executing a longer task, mutations will be processed after this task.\n */\n\nvar MUTATION_PROCESS_MAX_DELAY = 100;\nexport function createMutationBatch(processMutationBatch) {\n  var cancelScheduledFlush = noop;\n  var pendingMutations = [];\n\n  function flush() {\n    cancelScheduledFlush();\n    processMutationBatch(pendingMutations);\n    pendingMutations = [];\n  }\n\n  return {\n    addMutations: function addMutations(mutations) {\n      if (pendingMutations.length === 0) {\n        cancelScheduledFlush = scheduleMutationFlush(flush);\n      }\n\n      pendingMutations.push.apply(pendingMutations, mutations);\n    },\n    flush: flush,\n    stop: function stop() {\n      cancelScheduledFlush();\n    }\n  };\n}\n\nfunction scheduleMutationFlush(flush) {\n  var browserWindow = window; // Use 'requestIdleCallback' when available: it will throttle the mutation processing if the\n  // browser is busy rendering frames (ex: when frames are below 60fps). When not available, the\n  // fallback on 'requestAnimationFrame' will still ensure the mutations are processed after any\n  // browser rendering process (Layout, Recalculate Style, etc.), so we can serialize DOM nodes\n  // efficiently.\n\n  if (browserWindow.requestIdleCallback) {\n    var id_1 = browserWindow.requestIdleCallback(monitor(flush), {\n      timeout: MUTATION_PROCESS_MAX_DELAY\n    });\n    return function () {\n      return browserWindow.cancelIdleCallback(id_1);\n    };\n  }\n\n  var id = browserWindow.requestAnimationFrame(monitor(flush));\n  return function () {\n    return browserWindow.cancelAnimationFrame(id);\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AAGA;;;;;;;AAMA,IAAMC,0BAA0B,GAAG,GAAnC;AAEA,OAAM,SAAUC,mBAAV,CAA8BC,oBAA9B,EAA4F;EAChG,IAAIC,oBAAoB,GAAGJ,IAA3B;EACA,IAAIK,gBAAgB,GAAwB,EAA5C;;EAEA,SAASC,KAAT,GAAc;IACZF,oBAAoB;IACpBD,oBAAoB,CAACE,gBAAD,CAApB;IACAA,gBAAgB,GAAG,EAAnB;EACD;;EAED,OAAO;IACLE,YAAY,EAAE,sBAACC,SAAD,EAA+B;MAC3C,IAAIH,gBAAgB,CAACI,MAAjB,KAA4B,CAAhC,EAAmC;QACjCL,oBAAoB,GAAGM,qBAAqB,CAACJ,KAAD,CAA5C;MACD;;MACDD,gBAAgB,CAACM,IAAjB,CAAqBC,KAArB,mBAAyBJ,SAAzB;IACD,CANI;IAQLF,KAAK,OARA;IAULO,IAAI,EAAE;MACJT,oBAAoB;IACrB;EAZI,CAAP;AAcD;;AAED,SAASM,qBAAT,CAA+BJ,KAA/B,EAAgD;EAK9C,IAAMQ,aAAa,GAAIC,MAAvB,CAL8C,CAO9C;EACA;EACA;EACA;EACA;;EACA,IAAID,aAAa,CAACE,mBAAlB,EAAuC;IACrC,IAAMC,IAAE,GAAGH,aAAa,CAACE,mBAAd,CAAkCjB,OAAO,CAACO,KAAD,CAAzC,EAAkD;MAAEY,OAAO,EAAEjB;IAAX,CAAlD,CAAX;IACA,OAAO;MAAM,oBAAa,CAACkB,kBAAd,CAAiCF,IAAjC;IAAoC,CAAjD;EACD;;EACD,IAAMG,EAAE,GAAGN,aAAa,CAACO,qBAAd,CAAoCtB,OAAO,CAACO,KAAD,CAA3C,CAAX;EACA,OAAO;IAAM,oBAAa,CAACgB,oBAAd,CAAmCF,EAAnC;EAAsC,CAAnD;AACD","names":["monitor","noop","MUTATION_PROCESS_MAX_DELAY","createMutationBatch","processMutationBatch","cancelScheduledFlush","pendingMutations","flush","addMutations","mutations","length","scheduleMutationFlush","push","apply","stop","browserWindow","window","requestIdleCallback","id_1","timeout","cancelIdleCallback","id","requestAnimationFrame","cancelAnimationFrame"],"sourceRoot":"","sources":["../../../src/domain/record/mutationBatch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}