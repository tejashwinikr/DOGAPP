{"ast":null,"code":"import { Batch, combine, HttpRequest } from '@datadog/browser-core';\nimport { LifeCycleEventType } from '../domain/lifeCycle';\nimport { RumEventType } from '../rawRumEvent.types';\nexport function startRumBatch(configuration, lifeCycle) {\n  var batch = makeRumBatch(configuration, lifeCycle);\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, function (serverRumEvent) {\n    if (serverRumEvent.type === RumEventType.VIEW) {\n      batch.upsert(serverRumEvent, serverRumEvent.view.id);\n    } else {\n      batch.add(serverRumEvent);\n    }\n  });\n  return {\n    stop: function stop() {\n      batch.stop();\n    }\n  };\n}\n\nfunction makeRumBatch(configuration, lifeCycle) {\n  var primaryBatch = createRumBatch(configuration.rumEndpoint, function () {\n    return lifeCycle.notify(LifeCycleEventType.BEFORE_UNLOAD);\n  });\n  var replicaBatch;\n  var replica = configuration.replica;\n\n  if (replica !== undefined) {\n    replicaBatch = createRumBatch(replica.rumEndpoint);\n  }\n\n  function createRumBatch(endpointUrl, unloadCallback) {\n    return new Batch(new HttpRequest(endpointUrl, configuration.batchBytesLimit, true), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, unloadCallback);\n  }\n\n  function withReplicaApplicationId(message) {\n    return combine(message, {\n      application: {\n        id: replica.applicationId\n      }\n    });\n  }\n\n  var stopped = false;\n  return {\n    add: function add(message) {\n      if (stopped) {\n        return;\n      }\n\n      primaryBatch.add(message);\n\n      if (replicaBatch) {\n        replicaBatch.add(withReplicaApplicationId(message));\n      }\n    },\n    stop: function stop() {\n      stopped = true;\n    },\n    upsert: function upsert(message, key) {\n      if (stopped) {\n        return;\n      }\n\n      primaryBatch.upsert(message, key);\n\n      if (replicaBatch) {\n        replicaBatch.upsert(withReplicaApplicationId(message), key);\n      }\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAiDC,WAAjD,QAAoE,uBAApE;AACA,SAAoBC,kBAApB,QAA8C,qBAA9C;AACA,SAASC,YAAT,QAA6B,sBAA7B;AAGA,OAAM,SAAUC,aAAV,CAAwBC,aAAxB,EAAsDC,SAAtD,EAA0E;EAC9E,IAAMC,KAAK,GAAGC,YAAY,CAACH,aAAD,EAAgBC,SAAhB,CAA1B;EAEAA,SAAS,CAACG,SAAV,CAAoBP,kBAAkB,CAACQ,mBAAvC,EAA4D,UAACC,cAAD,EAAmC;IAC7F,IAAIA,cAAc,CAACC,IAAf,KAAwBT,YAAY,CAACU,IAAzC,EAA+C;MAC7CN,KAAK,CAACO,MAAN,CAAaH,cAAb,EAA6BA,cAAc,CAACI,IAAf,CAAoBC,EAAjD;IACD,CAFD,MAEO;MACLT,KAAK,CAACU,GAAN,CAAUN,cAAV;IACD;EACF,CAND;EAQA,OAAO;IACLO,IAAI;MACFX,KAAK,CAACW,IAAN;IACD;EAHI,CAAP;AAKD;;AAQD,SAASV,YAAT,CAAsBH,aAAtB,EAAoDC,SAApD,EAAwE;EACtE,IAAMa,YAAY,GAAGC,cAAc,CAACf,aAAa,CAACgB,WAAf,EAA4B;IAC7D,gBAAS,CAACC,MAAV,CAAiBpB,kBAAkB,CAACqB,aAApC;EAAkD,CADjB,CAAnC;EAIA,IAAIC,YAAJ;EACA,IAAMC,OAAO,GAAGpB,aAAa,CAACoB,OAA9B;;EACA,IAAIA,OAAO,KAAKC,SAAhB,EAA2B;IACzBF,YAAY,GAAGJ,cAAc,CAACK,OAAO,CAACJ,WAAT,CAA7B;EACD;;EAED,SAASD,cAAT,CAAwBO,WAAxB,EAA6CC,cAA7C,EAAwE;IACtE,OAAO,IAAI7B,KAAJ,CACL,IAAIE,WAAJ,CAAgB0B,WAAhB,EAA6BtB,aAAa,CAACwB,eAA3C,EAA4D,IAA5D,CADK,EAELxB,aAAa,CAACyB,YAFT,EAGLzB,aAAa,CAACwB,eAHT,EAILxB,aAAa,CAAC0B,cAJT,EAKL1B,aAAa,CAAC2B,YALT,EAMLJ,cANK,CAAP;EAQD;;EAED,SAASK,wBAAT,CAAkCC,OAAlC,EAAkD;IAChD,OAAOlC,OAAO,CAACkC,OAAD,EAAU;MAAEC,WAAW,EAAE;QAAEnB,EAAE,EAAES,OAAQ,CAACW;MAAf;IAAf,CAAV,CAAd;EACD;;EAED,IAAIC,OAAO,GAAG,KAAd;EACA,OAAO;IACLpB,GAAG,EAAE,aAACiB,OAAD,EAAiB;MACpB,IAAIG,OAAJ,EAAa;QACX;MACD;;MACDlB,YAAY,CAACF,GAAb,CAAiBiB,OAAjB;;MACA,IAAIV,YAAJ,EAAkB;QAChBA,YAAY,CAACP,GAAb,CAAiBgB,wBAAwB,CAACC,OAAD,CAAzC;MACD;IACF,CATI;IAULhB,IAAI,EAAE;MACJmB,OAAO,GAAG,IAAV;IACD,CAZI;IAaLvB,MAAM,EAAE,gBAACoB,OAAD,EAAmBI,GAAnB,EAA8B;MACpC,IAAID,OAAJ,EAAa;QACX;MACD;;MACDlB,YAAY,CAACL,MAAb,CAAoBoB,OAApB,EAA6BI,GAA7B;;MACA,IAAId,YAAJ,EAAkB;QAChBA,YAAY,CAACV,MAAb,CAAoBmB,wBAAwB,CAACC,OAAD,CAA5C,EAAuDI,GAAvD;MACD;IACF;EArBI,CAAP;AAuBD","names":["Batch","combine","HttpRequest","LifeCycleEventType","RumEventType","startRumBatch","configuration","lifeCycle","batch","makeRumBatch","subscribe","RUM_EVENT_COLLECTED","serverRumEvent","type","VIEW","upsert","view","id","add","stop","primaryBatch","createRumBatch","rumEndpoint","notify","BEFORE_UNLOAD","replicaBatch","replica","undefined","endpointUrl","unloadCallback","batchBytesLimit","maxBatchSize","maxMessageSize","flushTimeout","withReplicaApplicationId","message","application","applicationId","stopped","key"],"sourceRoot":"","sources":["../../src/transport/batch.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}