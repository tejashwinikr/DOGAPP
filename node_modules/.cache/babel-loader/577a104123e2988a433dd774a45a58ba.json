{"ast":null,"code":"import { findCommaSeparatedValue, ONE_MINUTE } from '@datadog/browser-core';\nexport var INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD = 2 * ONE_MINUTE;\nexport function getDocumentTraceId(document) {\n  var data = getDocumentTraceDataFromMeta(document) || getDocumentTraceDataFromComment(document);\n\n  if (!data || data.traceTime <= Date.now() - INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD) {\n    return undefined;\n  }\n\n  return data.traceId;\n}\nexport function getDocumentTraceDataFromMeta(document) {\n  var traceIdMeta = document.querySelector('meta[name=dd-trace-id]');\n  var traceTimeMeta = document.querySelector('meta[name=dd-trace-time]');\n  return createDocumentTraceData(traceIdMeta && traceIdMeta.content, traceTimeMeta && traceTimeMeta.content);\n}\nexport function getDocumentTraceDataFromComment(document) {\n  var comment = findTraceComment(document);\n\n  if (!comment) {\n    return undefined;\n  }\n\n  return createDocumentTraceData(findCommaSeparatedValue(comment, 'trace-id'), findCommaSeparatedValue(comment, 'trace-time'));\n}\nexport function createDocumentTraceData(traceId, rawTraceTime) {\n  var traceTime = rawTraceTime && Number(rawTraceTime);\n\n  if (!traceId || !traceTime) {\n    return undefined;\n  }\n\n  return {\n    traceId: traceId,\n    traceTime: traceTime\n  };\n}\nexport function findTraceComment(document) {\n  // 1. Try to find the comment as a direct child of the document\n  // Note: TSLint advises to use a 'for of', but TS doesn't allow to use 'for of' if the iterated\n  // value is not an array or string (here, a NodeList).\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (var i = 0; i < document.childNodes.length; i += 1) {\n    var comment = getTraceCommentFromNode(document.childNodes[i]);\n\n    if (comment) {\n      return comment;\n    }\n  } // 2. If the comment is placed after the </html> tag, but have some space or new lines before or\n  // after, the DOM parser will lift it (and the surrounding text) at the end of the <body> tag.\n  // Try to look for the comment at the end of the <body> by by iterating over its child nodes in\n  // reverse order, stopping if we come across a non-text node.\n\n\n  if (document.body) {\n    for (var i = document.body.childNodes.length - 1; i >= 0; i -= 1) {\n      var node = document.body.childNodes[i];\n      var comment = getTraceCommentFromNode(node);\n\n      if (comment) {\n        return comment;\n      }\n\n      if (!isTextNode(node)) {\n        break;\n      }\n    }\n  }\n}\n\nfunction getTraceCommentFromNode(node) {\n  if (node && isCommentNode(node)) {\n    var match = /^\\s*DATADOG;(.*?)\\s*$/.exec(node.data);\n\n    if (match) {\n      return match[1];\n    }\n  }\n}\n\nfunction isCommentNode(node) {\n  return node.nodeName === '#comment';\n}\n\nfunction isTextNode(node) {\n  return node.nodeName === '#text';\n}","map":{"version":3,"mappings":"AAAA,SAASA,uBAAT,EAAkCC,UAAlC,QAA+D,uBAA/D;AAOA,OAAO,IAAMC,4CAA4C,GAAG,IAAID,UAAzD;AAEP,OAAM,SAAUE,kBAAV,CAA6BC,QAA7B,EAA+C;EACnD,IAAMC,IAAI,GAAGC,4BAA4B,CAACF,QAAD,CAA5B,IAA0CG,+BAA+B,CAACH,QAAD,CAAtF;;EAEA,IAAI,CAACC,IAAD,IAASA,IAAI,CAACG,SAAL,IAAkBC,IAAI,CAACC,GAAL,KAAaR,4CAA5C,EAA0F;IACxF,OAAOS,SAAP;EACD;;EAED,OAAON,IAAI,CAACO,OAAZ;AACD;AAED,OAAM,SAAUN,4BAAV,CAAuCF,QAAvC,EAAyD;EAC7D,IAAMS,WAAW,GAAGT,QAAQ,CAACU,aAAT,CAAwC,wBAAxC,CAApB;EACA,IAAMC,aAAa,GAAGX,QAAQ,CAACU,aAAT,CAAwC,0BAAxC,CAAtB;EACA,OAAOE,uBAAuB,CAACH,WAAW,IAAIA,WAAW,CAACI,OAA5B,EAAqCF,aAAa,IAAIA,aAAa,CAACE,OAApE,CAA9B;AACD;AAED,OAAM,SAAUV,+BAAV,CAA0CH,QAA1C,EAA4D;EAChE,IAAMc,OAAO,GAAGC,gBAAgB,CAACf,QAAD,CAAhC;;EACA,IAAI,CAACc,OAAL,EAAc;IACZ,OAAOP,SAAP;EACD;;EACD,OAAOK,uBAAuB,CAC5BhB,uBAAuB,CAACkB,OAAD,EAAU,UAAV,CADK,EAE5BlB,uBAAuB,CAACkB,OAAD,EAAU,YAAV,CAFK,CAA9B;AAID;AAED,OAAM,SAAUF,uBAAV,CACJJ,OADI,EAEJQ,YAFI,EAEmC;EAEvC,IAAMZ,SAAS,GAAGY,YAAY,IAAKC,MAAM,CAACD,YAAD,CAAzC;;EACA,IAAI,CAACR,OAAD,IAAY,CAACJ,SAAjB,EAA4B;IAC1B,OAAOG,SAAP;EACD;;EAED,OAAO;IACLC,OAAO,SADF;IAELJ,SAAS;EAFJ,CAAP;AAID;AAED,OAAM,SAAUW,gBAAV,CAA2Bf,QAA3B,EAA6C;EACjD;EACA;EACA;EACA;EACA,KAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,QAAQ,CAACmB,UAAT,CAAoBC,MAAxC,EAAgDF,CAAC,IAAI,CAArD,EAAwD;IACtD,IAAMJ,OAAO,GAAGO,uBAAuB,CAACrB,QAAQ,CAACmB,UAAT,CAAoBD,CAApB,CAAD,CAAvC;;IACA,IAAIJ,OAAJ,EAAa;MACX,OAAOA,OAAP;IACD;EACF,CAVgD,CAYjD;EACA;EACA;EACA;;;EACA,IAAId,QAAQ,CAACsB,IAAb,EAAmB;IACjB,KAAK,IAAIJ,CAAC,GAAGlB,QAAQ,CAACsB,IAAT,CAAcH,UAAd,CAAyBC,MAAzB,GAAkC,CAA/C,EAAkDF,CAAC,IAAI,CAAvD,EAA0DA,CAAC,IAAI,CAA/D,EAAkE;MAChE,IAAMK,IAAI,GAAGvB,QAAQ,CAACsB,IAAT,CAAcH,UAAd,CAAyBD,CAAzB,CAAb;MACA,IAAMJ,OAAO,GAAGO,uBAAuB,CAACE,IAAD,CAAvC;;MACA,IAAIT,OAAJ,EAAa;QACX,OAAOA,OAAP;MACD;;MACD,IAAI,CAACU,UAAU,CAACD,IAAD,CAAf,EAAuB;QACrB;MACD;IACF;EACF;AACF;;AAED,SAASF,uBAAT,CAAiCE,IAAjC,EAAkD;EAChD,IAAIA,IAAI,IAAIE,aAAa,CAACF,IAAD,CAAzB,EAAiC;IAC/B,IAAMG,KAAK,GAAG,wBAAwBC,IAAxB,CAA6BJ,IAAI,CAACtB,IAAlC,CAAd;;IACA,IAAIyB,KAAJ,EAAW;MACT,OAAOA,KAAK,CAAC,CAAD,CAAZ;IACD;EACF;AACF;;AAED,SAASD,aAAT,CAAuBF,IAAvB,EAAiC;EAC/B,OAAOA,IAAI,CAACK,QAAL,KAAkB,UAAzB;AACD;;AAED,SAASJ,UAAT,CAAoBD,IAApB,EAA8B;EAC5B,OAAOA,IAAI,CAACK,QAAL,KAAkB,OAAzB;AACD","names":["findCommaSeparatedValue","ONE_MINUTE","INITIAL_DOCUMENT_OUTDATED_TRACE_ID_THRESHOLD","getDocumentTraceId","document","data","getDocumentTraceDataFromMeta","getDocumentTraceDataFromComment","traceTime","Date","now","undefined","traceId","traceIdMeta","querySelector","traceTimeMeta","createDocumentTraceData","content","comment","findTraceComment","rawTraceTime","Number","i","childNodes","length","getTraceCommentFromNode","body","node","isTextNode","isCommentNode","match","exec","nodeName"],"sourceRoot":"","sources":["../../../src/domain/tracing/getDocumentTraceId.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}