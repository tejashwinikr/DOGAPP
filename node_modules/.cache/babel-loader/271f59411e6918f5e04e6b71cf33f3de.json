{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { BoundedBuffer, combine, createContextManager, defineGlobal, getGlobalObject, isPercentage, makePublicApi, monitor, display, deepClone } from '@datadog/browser-core';\nimport { Logger } from '../domain/logger';\nimport { startLogs } from './startLogs';\nexport var datadogLogs = makeLogsPublicApi(startLogs);\ndefineGlobal(getGlobalObject(), 'DD_LOGS', datadogLogs);\nexport function makeLogsPublicApi(startLogsImpl) {\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var customLoggers = {};\n  var beforeInitSendLog = new BoundedBuffer();\n\n  var _sendLogStrategy = function sendLogStrategy(message, currentContext) {\n    beforeInitSendLog.add(function () {\n      return _sendLogStrategy(message, currentContext);\n    });\n  };\n\n  var getInitConfigurationStrategy = function getInitConfigurationStrategy() {\n    return undefined;\n  };\n\n  var logger = new Logger(sendLog);\n  return makePublicApi({\n    logger: logger,\n    init: monitor(function (initConfiguration) {\n      if (!canInitLogs(initConfiguration)) {\n        return;\n      }\n\n      _sendLogStrategy = startLogsImpl(initConfiguration, logger, globalContextManager.get);\n\n      getInitConfigurationStrategy = function getInitConfigurationStrategy() {\n        return deepClone(initConfiguration);\n      };\n\n      beforeInitSendLog.drain();\n      isAlreadyInitialized = true;\n    }),\n    getLoggerGlobalContext: monitor(globalContextManager.get),\n    setLoggerGlobalContext: monitor(globalContextManager.set),\n    addLoggerGlobalContext: monitor(globalContextManager.add),\n    removeLoggerGlobalContext: monitor(globalContextManager.remove),\n    createLogger: monitor(function (name, conf) {\n      if (conf === void 0) {\n        conf = {};\n      }\n\n      customLoggers[name] = new Logger(sendLog, conf.handler, conf.level, __assign(__assign({}, conf.context), {\n        logger: {\n          name: name\n        }\n      }));\n      return customLoggers[name];\n    }),\n    getLogger: monitor(function (name) {\n      return customLoggers[name];\n    }),\n    getInitConfiguration: monitor(function () {\n      return getInitConfigurationStrategy();\n    })\n  });\n\n  function canInitLogs(initConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!initConfiguration.silentMultipleInit) {\n        display.error('DD_LOGS is already initialized.');\n      }\n\n      return false;\n    }\n\n    if (!initConfiguration || !initConfiguration.clientToken) {\n      display.error('Client Token is not configured, we will not send any data.');\n      return false;\n    }\n\n    if (initConfiguration.sampleRate !== undefined && !isPercentage(initConfiguration.sampleRate)) {\n      display.error('Sample Rate should be a number between 0 and 100');\n      return false;\n    }\n\n    return true;\n  }\n\n  function sendLog(message) {\n    _sendLogStrategy(message, combine({\n      date: Date.now(),\n      view: {\n        referrer: document.referrer,\n        url: window.location.href\n      }\n    }, globalContextManager.get()));\n  }\n}","map":{"version":3,"mappings":"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","names":["BoundedBuffer","combine","createContextManager","defineGlobal","getGlobalObject","isPercentage","makePublicApi","monitor","display","deepClone","Logger","startLogs","datadogLogs","makeLogsPublicApi","startLogsImpl","isAlreadyInitialized","globalContextManager","customLoggers","beforeInitSendLog","sendLogStrategy","message","currentContext","add","getInitConfigurationStrategy","logger","sendLog","init","initConfiguration","canInitLogs","get","drain","getLoggerGlobalContext","setLoggerGlobalContext","set","addLoggerGlobalContext","removeLoggerGlobalContext","remove","createLogger","name","conf","handler","level","__assign","context","getLogger","getInitConfiguration","silentMultipleInit","error","clientToken","sampleRate","undefined","date","Date","now","view","referrer","document","url","window","location","href"],"sourceRoot":"","sources":["../../src/boot/logs.entry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}