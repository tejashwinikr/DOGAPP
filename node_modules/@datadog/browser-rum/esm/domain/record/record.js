import { __assign } from "tslib";
import { RecordType } from '../../types';
import { serializeDocument } from './serialize';
import { initObservers } from './observer';
import { IncrementalSource } from './types';
import { getWindowHeight, getWindowWidth } from './utils';
import { MutationController } from './mutationObserver';
export function record(options) {
    var emit = options.emit;
    // runtime checks for user options
    if (!emit) {
        throw new Error('emit function is required');
    }
    var mutationController = new MutationController();
    var takeFullSnapshot = function () {
        var _a, _b, _c, _d;
        mutationController.flush(); // process any pending mutation before taking a full snapshot
        emit({
            data: {
                height: getWindowHeight(),
                href: window.location.href,
                width: getWindowWidth(),
            },
            type: RecordType.Meta,
        });
        emit({
            data: {
                has_focus: document.hasFocus(),
            },
            type: RecordType.Focus,
        });
        emit({
            data: {
                node: serializeDocument(document, options.initialPrivacyLevel),
                initialOffset: {
                    left: window.pageXOffset !== undefined
                        ? window.pageXOffset
                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) || ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) || (document === null || document === void 0 ? void 0 : document.body.scrollLeft) ||
                            0,
                    top: window.pageYOffset !== undefined
                        ? window.pageYOffset
                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) || ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) || (document === null || document === void 0 ? void 0 : document.body.scrollTop) ||
                            0,
                },
            },
            type: RecordType.FullSnapshot,
        });
    };
    takeFullSnapshot();
    var stopObservers = initObservers({
        mutationController: mutationController,
        initialPrivacyLevel: options.initialPrivacyLevel,
        inputCb: function (v) {
            return emit({
                data: __assign({ source: IncrementalSource.Input }, v),
                type: RecordType.IncrementalSnapshot,
            });
        },
        mediaInteractionCb: function (p) {
            return emit({
                data: __assign({ source: IncrementalSource.MediaInteraction }, p),
                type: RecordType.IncrementalSnapshot,
            });
        },
        mouseInteractionCb: function (d) {
            return emit({
                data: __assign({ source: IncrementalSource.MouseInteraction }, d),
                type: RecordType.IncrementalSnapshot,
            });
        },
        mousemoveCb: function (positions, source) {
            return emit({
                data: {
                    positions: positions,
                    source: source,
                },
                type: RecordType.IncrementalSnapshot,
            });
        },
        mutationCb: function (m) {
            return emit({
                data: __assign({ source: IncrementalSource.Mutation }, m),
                type: RecordType.IncrementalSnapshot,
            });
        },
        scrollCb: function (p) {
            return emit({
                data: __assign({ source: IncrementalSource.Scroll }, p),
                type: RecordType.IncrementalSnapshot,
            });
        },
        styleSheetRuleCb: function (r) {
            return emit({
                data: __assign({ source: IncrementalSource.StyleSheetRule }, r),
                type: RecordType.IncrementalSnapshot,
            });
        },
        viewportResizeCb: function (d) {
            return emit({
                data: __assign({ source: IncrementalSource.ViewportResize }, d),
                type: RecordType.IncrementalSnapshot,
            });
        },
        focusCb: function (data) {
            return emit({
                type: RecordType.Focus,
                data: data,
            });
        },
    });
    return {
        stop: stopObservers,
        takeFullSnapshot: takeFullSnapshot,
        flushMutations: function () { return mutationController.flush(); },
    };
}
//# sourceMappingURL=record.js.map