"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCookieOptions = exports.buildConfiguration = exports.DEFAULT_CONFIGURATION = exports.InitialPrivacyLevel = void 0;
var tslib_1 = require("tslib");
var cookie_1 = require("../../browser/cookie");
var catchUserErrors_1 = require("../../tools/catchUserErrors");
var utils_1 = require("../../tools/utils");
var transportConfiguration_1 = require("./transportConfiguration");
exports.InitialPrivacyLevel = {
    ALLOW: 'allow',
    MASK: 'mask',
    MASK_FORMS_ONLY: 'mask-forms-only',
};
exports.DEFAULT_CONFIGURATION = {
    allowedTracingOrigins: [],
    maxErrorsByMinute: 3000,
    maxInternalMonitoringMessagesPerPage: 15,
    sampleRate: 100,
    replaySampleRate: 100,
    silentMultipleInit: false,
    trackInteractions: false,
    trackViewsManually: false,
    initialPrivacyLevel: exports.InitialPrivacyLevel.ALLOW,
    /**
     * arbitrary value, byte precision not needed
     */
    requestErrorResponseLengthLimit: 32 * utils_1.ONE_KILO_BYTE,
    /**
     * flush automatically, aim to be lower than ALB connection timeout
     * to maximize connection reuse.
     */
    flushTimeout: 30 * utils_1.ONE_SECOND,
    /**
     * Logs intake limit
     */
    maxBatchSize: 50,
    maxMessageSize: 256 * utils_1.ONE_KILO_BYTE,
    /**
     * beacon payload max queue size implementation is 64kb
     * ensure that we leave room for logs, rum and potential other users
     */
    batchBytesLimit: 16 * utils_1.ONE_KILO_BYTE,
};
function buildConfiguration(initConfiguration, buildEnv) {
    var enableExperimentalFeatures = Array.isArray(initConfiguration.enableExperimentalFeatures)
        ? initConfiguration.enableExperimentalFeatures
        : [];
    var isEnabled = function (feature) { return utils_1.includes(enableExperimentalFeatures, feature); };
    var configuration = tslib_1.__assign(tslib_1.__assign({ beforeSend: initConfiguration.beforeSend && catchUserErrors_1.catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'), cookieOptions: buildCookieOptions(initConfiguration), isEnabled: isEnabled, service: initConfiguration.service }, transportConfiguration_1.computeTransportConfiguration(initConfiguration, buildEnv, isEnabled('support-intake-v2'))), exports.DEFAULT_CONFIGURATION);
    if ('allowedTracingOrigins' in initConfiguration) {
        configuration.allowedTracingOrigins = initConfiguration.allowedTracingOrigins;
    }
    if ('sampleRate' in initConfiguration) {
        configuration.sampleRate = initConfiguration.sampleRate;
    }
    if ('replaySampleRate' in initConfiguration) {
        configuration.replaySampleRate = initConfiguration.replaySampleRate;
    }
    if ('trackInteractions' in initConfiguration) {
        configuration.trackInteractions = !!initConfiguration.trackInteractions;
    }
    if ('trackViewsManually' in initConfiguration) {
        configuration.trackViewsManually = !!initConfiguration.trackViewsManually;
    }
    if ('actionNameAttribute' in initConfiguration) {
        configuration.actionNameAttribute = initConfiguration.actionNameAttribute;
    }
    if (configuration.isEnabled('initial-privacy-level-option') &&
        utils_1.objectHasValue(exports.InitialPrivacyLevel, initConfiguration.initialPrivacyLevel)) {
        configuration.initialPrivacyLevel = initConfiguration.initialPrivacyLevel;
    }
    return configuration;
}
exports.buildConfiguration = buildConfiguration;
function buildCookieOptions(initConfiguration) {
    var cookieOptions = {};
    cookieOptions.secure = mustUseSecureCookie(initConfiguration);
    cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie;
    if (!!initConfiguration.trackSessionAcrossSubdomains) {
        cookieOptions.domain = cookie_1.getCurrentSite();
    }
    return cookieOptions;
}
exports.buildCookieOptions = buildCookieOptions;
function mustUseSecureCookie(initConfiguration) {
    return !!initConfiguration.useSecureSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;
}
//# sourceMappingURL=configuration.js.map