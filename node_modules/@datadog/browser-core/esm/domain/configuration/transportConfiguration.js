import { __assign } from "tslib";
import { BuildMode } from '../../boot/init';
import { createEndpointBuilder, ENDPOINTS_TYPES, INTAKE_SITE_US } from './endpointBuilder';
export function computeTransportConfiguration(initConfiguration, buildEnv, isIntakeV2Enabled) {
    var endpointBuilder = createEndpointBuilder(initConfiguration, buildEnv, isIntakeV2Enabled);
    var intakeUrls = ENDPOINTS_TYPES.map(function (endpointType) { return endpointBuilder.buildIntakeUrl(endpointType); });
    var configuration = {
        isIntakeUrl: function (url) { return intakeUrls.some(function (intakeUrl) { return url.indexOf(intakeUrl) === 0; }); },
        logsEndpoint: endpointBuilder.build('logs'),
        rumEndpoint: endpointBuilder.build('rum'),
        sessionReplayEndpoint: endpointBuilder.build('sessionReplay'),
    };
    if (initConfiguration.internalMonitoringApiKey) {
        configuration.internalMonitoringEndpoint = endpointBuilder.build('logs', 'browser-agent-internal-monitoring');
    }
    if (buildEnv.buildMode === BuildMode.E2E_TEST) {
        configuration.internalMonitoringEndpoint = '<<< E2E INTERNAL MONITORING ENDPOINT >>>';
        configuration.logsEndpoint = '<<< E2E LOGS ENDPOINT >>>';
        configuration.rumEndpoint = '<<< E2E RUM ENDPOINT >>>';
        configuration.sessionReplayEndpoint = '<<< E2E SESSION REPLAY ENDPOINT >>>';
    }
    if (buildEnv.buildMode === BuildMode.STAGING && initConfiguration.replica !== undefined) {
        var replicaConfiguration = __assign(__assign({}, initConfiguration), { site: INTAKE_SITE_US, applicationId: initConfiguration.replica.applicationId, clientToken: initConfiguration.replica.clientToken, useAlternateIntakeDomains: true, intakeApiVersion: isIntakeV2Enabled ? 2 : 1 });
        var replicaEndpointBuilder_1 = createEndpointBuilder(replicaConfiguration, buildEnv, isIntakeV2Enabled);
        configuration.replica = {
            applicationId: initConfiguration.replica.applicationId,
            internalMonitoringEndpoint: replicaEndpointBuilder_1.build('logs', 'browser-agent-internal-monitoring'),
            logsEndpoint: replicaEndpointBuilder_1.build('logs'),
            rumEndpoint: replicaEndpointBuilder_1.build('rum'),
        };
        var replicaIntakeUrls = ENDPOINTS_TYPES.map(function (endpointType) { return replicaEndpointBuilder_1.buildIntakeUrl(endpointType); });
        replicaIntakeUrls.forEach(function (replicaIntakeUrl) { return intakeUrls.push(replicaIntakeUrl); });
        intakeUrls.push.apply(intakeUrls, replicaIntakeUrls);
    }
    return configuration;
}
//# sourceMappingURL=transportConfiguration.js.map