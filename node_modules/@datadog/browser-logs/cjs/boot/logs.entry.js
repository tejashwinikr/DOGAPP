"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLogsPublicApi = exports.datadogLogs = void 0;
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var logger_1 = require("../domain/logger");
var startLogs_1 = require("./startLogs");
exports.datadogLogs = makeLogsPublicApi(startLogs_1.startLogs);
browser_core_1.defineGlobal(browser_core_1.getGlobalObject(), 'DD_LOGS', exports.datadogLogs);
function makeLogsPublicApi(startLogsImpl) {
    var isAlreadyInitialized = false;
    var globalContextManager = browser_core_1.createContextManager();
    var customLoggers = {};
    var beforeInitSendLog = new browser_core_1.BoundedBuffer();
    var sendLogStrategy = function (message, currentContext) {
        beforeInitSendLog.add(function () { return sendLogStrategy(message, currentContext); });
    };
    var getInitConfigurationStrategy = function () { return undefined; };
    var logger = new logger_1.Logger(sendLog);
    return browser_core_1.makePublicApi({
        logger: logger,
        init: browser_core_1.monitor(function (initConfiguration) {
            if (!canInitLogs(initConfiguration)) {
                return;
            }
            sendLogStrategy = startLogsImpl(initConfiguration, logger, globalContextManager.get);
            getInitConfigurationStrategy = function () { return browser_core_1.deepClone(initConfiguration); };
            beforeInitSendLog.drain();
            isAlreadyInitialized = true;
        }),
        getLoggerGlobalContext: browser_core_1.monitor(globalContextManager.get),
        setLoggerGlobalContext: browser_core_1.monitor(globalContextManager.set),
        addLoggerGlobalContext: browser_core_1.monitor(globalContextManager.add),
        removeLoggerGlobalContext: browser_core_1.monitor(globalContextManager.remove),
        createLogger: browser_core_1.monitor(function (name, conf) {
            if (conf === void 0) { conf = {}; }
            customLoggers[name] = new logger_1.Logger(sendLog, conf.handler, conf.level, tslib_1.__assign(tslib_1.__assign({}, conf.context), { logger: { name: name } }));
            return customLoggers[name];
        }),
        getLogger: browser_core_1.monitor(function (name) { return customLoggers[name]; }),
        getInitConfiguration: browser_core_1.monitor(function () { return getInitConfigurationStrategy(); }),
    });
    function canInitLogs(initConfiguration) {
        if (isAlreadyInitialized) {
            if (!initConfiguration.silentMultipleInit) {
                browser_core_1.display.error('DD_LOGS is already initialized.');
            }
            return false;
        }
        if (!initConfiguration || !initConfiguration.clientToken) {
            browser_core_1.display.error('Client Token is not configured, we will not send any data.');
            return false;
        }
        if (initConfiguration.sampleRate !== undefined && !browser_core_1.isPercentage(initConfiguration.sampleRate)) {
            browser_core_1.display.error('Sample Rate should be a number between 0 and 100');
            return false;
        }
        return true;
    }
    function sendLog(message) {
        sendLogStrategy(message, browser_core_1.combine({
            date: Date.now(),
            view: {
                referrer: document.referrer,
                url: window.location.href,
            },
        }, globalContextManager.get()));
    }
}
exports.makeLogsPublicApi = makeLogsPublicApi;
//# sourceMappingURL=logs.entry.js.map