"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRumPublicApi = void 0;
var browser_core_1 = require("@datadog/browser-core");
var rawRumEvent_types_1 = require("../rawRumEvent.types");
var buildEnv_1 = require("./buildEnv");
function makeRumPublicApi(startRumImpl, recorderApi) {
    var isAlreadyInitialized = false;
    var globalContextManager = browser_core_1.createContextManager();
    var user = {};
    var getInternalContextStrategy = function () { return undefined; };
    var getInitConfigurationStrategy = function () { return undefined; };
    var bufferApiCalls = new browser_core_1.BoundedBuffer();
    var addTimingStrategy = function (name, time) {
        if (time === void 0) { time = browser_core_1.timeStampNow(); }
        bufferApiCalls.add(function () { return addTimingStrategy(name, time); });
    };
    var startViewStrategy = function (name, startClocks) {
        if (startClocks === void 0) { startClocks = browser_core_1.clocksNow(); }
        bufferApiCalls.add(function () { return startViewStrategy(name, startClocks); });
    };
    var addActionStrategy = function (action, commonContext) {
        if (commonContext === void 0) { commonContext = clonedCommonContext(); }
        bufferApiCalls.add(function () { return addActionStrategy(action, commonContext); });
    };
    var addErrorStrategy = function (providedError, commonContext) {
        if (commonContext === void 0) { commonContext = clonedCommonContext(); }
        bufferApiCalls.add(function () { return addErrorStrategy(providedError, commonContext); });
    };
    function clonedCommonContext() {
        return browser_core_1.deepClone({
            context: globalContextManager.get(),
            user: user,
        });
    }
    function initRum(initConfiguration) {
        if (!browser_core_1.checkCookiesAuthorized(browser_core_1.buildCookieOptions(initConfiguration)) ||
            !browser_core_1.checkIsNotLocalFile() ||
            !canInitRum(initConfiguration)) {
            return;
        }
        var _a = browser_core_1.commonInit(initConfiguration, buildEnv_1.buildEnv), configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;
        if (!configuration.trackViewsManually) {
            doStartRum(initConfiguration, configuration, internalMonitoring);
        }
        else {
            // drain beforeInitCalls by buffering them until we start RUM
            // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls
            // in order to ensure that calls are processed in order
            var beforeInitCalls = bufferApiCalls;
            bufferApiCalls = new browser_core_1.BoundedBuffer();
            startViewStrategy = function (name) {
                doStartRum(initConfiguration, configuration, internalMonitoring, name);
            };
            beforeInitCalls.drain();
        }
        getInitConfigurationStrategy = function () { return browser_core_1.deepClone(initConfiguration); };
        isAlreadyInitialized = true;
    }
    function doStartRum(initConfiguration, configuration, internalMonitoring, initialViewName) {
        var startRumResults = startRumImpl(initConfiguration, configuration, internalMonitoring, function () { return ({
            user: user,
            context: globalContextManager.get(),
            hasReplay: recorderApi.isRecording() ? true : undefined,
        }); }, recorderApi, initialViewName);
        (startViewStrategy = startRumResults.startView, addActionStrategy = startRumResults.addAction, addErrorStrategy = startRumResults.addError, addTimingStrategy = startRumResults.addTiming, getInternalContextStrategy = startRumResults.getInternalContext);
        bufferApiCalls.drain();
        recorderApi.onRumStart(startRumResults.lifeCycle, initConfiguration, configuration, startRumResults.session, startRumResults.parentContexts);
    }
    var rumPublicApi = browser_core_1.makePublicApi({
        init: browser_core_1.monitor(initRum),
        addRumGlobalContext: browser_core_1.monitor(globalContextManager.add),
        removeRumGlobalContext: browser_core_1.monitor(globalContextManager.remove),
        getRumGlobalContext: browser_core_1.monitor(globalContextManager.get),
        setRumGlobalContext: browser_core_1.monitor(globalContextManager.set),
        getInternalContext: browser_core_1.monitor(function (startTime) { return getInternalContextStrategy(startTime); }),
        getInitConfiguration: browser_core_1.monitor(function () { return getInitConfigurationStrategy(); }),
        addAction: browser_core_1.monitor(function (name, context) {
            addActionStrategy({
                name: name,
                context: browser_core_1.deepClone(context),
                startClocks: browser_core_1.clocksNow(),
                type: rawRumEvent_types_1.ActionType.CUSTOM,
            });
        }),
        addError: function (error, context) {
            var handlingStack = browser_core_1.createHandlingStack();
            browser_core_1.callMonitored(function () {
                addErrorStrategy({
                    error: error,
                    handlingStack: handlingStack,
                    context: browser_core_1.deepClone(context),
                    startClocks: browser_core_1.clocksNow(),
                });
            });
        },
        addTiming: browser_core_1.monitor(function (name) {
            addTimingStrategy(name);
        }),
        setUser: browser_core_1.monitor(function (newUser) {
            var sanitizedUser = sanitizeUser(newUser);
            if (sanitizedUser) {
                user = sanitizedUser;
            }
            else {
                browser_core_1.display.error('Unsupported user:', newUser);
            }
        }),
        removeUser: browser_core_1.monitor(function () {
            user = {};
        }),
        startView: browser_core_1.monitor(function (name) {
            startViewStrategy(name);
        }),
        startSessionReplayRecording: browser_core_1.monitor(recorderApi.start),
        stopSessionReplayRecording: browser_core_1.monitor(recorderApi.stop),
    });
    return rumPublicApi;
    function sanitizeUser(newUser) {
        if (typeof newUser !== 'object' || !newUser) {
            return;
        }
        var result = browser_core_1.deepClone(newUser);
        if ('id' in result) {
            result.id = String(result.id);
        }
        if ('name' in result) {
            result.name = String(result.name);
        }
        if ('email' in result) {
            result.email = String(result.email);
        }
        return result;
    }
    function canInitRum(initConfiguration) {
        if (isAlreadyInitialized) {
            if (!initConfiguration.silentMultipleInit) {
                browser_core_1.display.error('DD_RUM is already initialized.');
            }
            return false;
        }
        if (!initConfiguration || !initConfiguration.clientToken) {
            browser_core_1.display.error('Client Token is not configured, we will not send any data.');
            return false;
        }
        if (!initConfiguration.applicationId) {
            browser_core_1.display.error('Application ID is not configured, no RUM data will be collected.');
            return false;
        }
        if (initConfiguration.sampleRate !== undefined && !browser_core_1.isPercentage(initConfiguration.sampleRate)) {
            browser_core_1.display.error('Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (initConfiguration.replaySampleRate !== undefined && !browser_core_1.isPercentage(initConfiguration.replaySampleRate)) {
            browser_core_1.display.error('Replay Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (Array.isArray(initConfiguration.allowedTracingOrigins) &&
            initConfiguration.allowedTracingOrigins.length !== 0 &&
            initConfiguration.service === undefined) {
            browser_core_1.display.error('Service need to be configured when tracing is enabled');
            return false;
        }
        return true;
    }
}
exports.makeRumPublicApi = makeRumPublicApi;
//# sourceMappingURL=rumPublicApi.js.map