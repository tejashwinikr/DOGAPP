"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areDifferentLocation = exports.trackLocationChanges = void 0;
var browser_core_1 = require("@datadog/browser-core");
function trackLocationChanges(onLocationChange) {
    var stopHistoryTracking = trackHistory(onLocationChange).stop;
    var stopHashTracking = trackHash(onLocationChange).stop;
    return {
        stop: function () {
            stopHistoryTracking();
            stopHashTracking();
        },
    };
}
exports.trackLocationChanges = trackLocationChanges;
function areDifferentLocation(currentLocation, otherLocation) {
    return (currentLocation.pathname !== otherLocation.pathname ||
        (!isHashAnAnchor(otherLocation.hash) &&
            getPathFromHash(otherLocation.hash) !== getPathFromHash(currentLocation.hash)));
}
exports.areDifferentLocation = areDifferentLocation;
function trackHistory(onHistoryChange) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var originalPushState = history.pushState;
    history.pushState = browser_core_1.monitor(function () {
        originalPushState.apply(this, arguments);
        onHistoryChange();
    });
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var originalReplaceState = history.replaceState;
    history.replaceState = browser_core_1.monitor(function () {
        originalReplaceState.apply(this, arguments);
        onHistoryChange();
    });
    var removeListener = browser_core_1.addEventListener(window, "popstate" /* POP_STATE */, onHistoryChange).stop;
    var stop = function () {
        removeListener();
        history.pushState = originalPushState;
        history.replaceState = originalReplaceState;
    };
    return { stop: stop };
}
function trackHash(onHashChange) {
    return browser_core_1.addEventListener(window, "hashchange" /* HASH_CHANGE */, onHashChange);
}
function isHashAnAnchor(hash) {
    var correspondingId = hash.substr(1);
    return !!document.getElementById(correspondingId);
}
function getPathFromHash(hash) {
    var index = hash.indexOf('?');
    return index < 0 ? hash : hash.slice(0, index);
}
//# sourceMappingURL=trackLocationChanges.js.map