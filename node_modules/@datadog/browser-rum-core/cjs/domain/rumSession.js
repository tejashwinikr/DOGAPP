"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRumSession = exports.RumTrackingType = exports.RumSessionPlan = exports.RUM_SESSION_KEY = void 0;
var browser_core_1 = require("@datadog/browser-core");
var lifeCycle_1 = require("./lifeCycle");
exports.RUM_SESSION_KEY = 'rum';
var RumSessionPlan;
(function (RumSessionPlan) {
    RumSessionPlan[RumSessionPlan["LITE"] = 1] = "LITE";
    RumSessionPlan[RumSessionPlan["REPLAY"] = 2] = "REPLAY";
})(RumSessionPlan = exports.RumSessionPlan || (exports.RumSessionPlan = {}));
var RumTrackingType;
(function (RumTrackingType) {
    RumTrackingType["NOT_TRACKED"] = "0";
    // Note: the "tracking type" value (stored in the session cookie) does not match the "session
    // plan" value (sent in RUM events). This is expected, and was done to keep retrocompatibility
    // with active sessions when upgrading the SDK.
    RumTrackingType["TRACKED_REPLAY"] = "1";
    RumTrackingType["TRACKED_LITE"] = "2";
})(RumTrackingType = exports.RumTrackingType || (exports.RumTrackingType = {}));
function startRumSession(configuration, lifeCycle) {
    var session = browser_core_1.startSessionManagement(configuration.cookieOptions, exports.RUM_SESSION_KEY, function (rawTrackingType) {
        return computeSessionState(configuration, rawTrackingType);
    });
    session.renewObservable.subscribe(function () {
        lifeCycle.notify(lifeCycle_1.LifeCycleEventType.SESSION_EXPIRED);
        lifeCycle.notify(lifeCycle_1.LifeCycleEventType.SESSION_RENEWED);
    });
    return {
        getId: session.getId,
        isTracked: function () { return isSessionTracked(session); },
        hasReplayPlan: function () { return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_REPLAY; },
        hasLitePlan: function () { return isSessionTracked(session) && session.getTrackingType() === RumTrackingType.TRACKED_LITE; },
    };
}
exports.startRumSession = startRumSession;
function isSessionTracked(session) {
    return session.getId() !== undefined && isTypeTracked(session.getTrackingType());
}
function computeSessionState(configuration, rawTrackingType) {
    var trackingType;
    if (hasValidRumSession(rawTrackingType)) {
        trackingType = rawTrackingType;
    }
    else if (!browser_core_1.performDraw(configuration.sampleRate)) {
        trackingType = RumTrackingType.NOT_TRACKED;
    }
    else if (!browser_core_1.performDraw(configuration.replaySampleRate)) {
        trackingType = RumTrackingType.TRACKED_LITE;
    }
    else {
        trackingType = RumTrackingType.TRACKED_REPLAY;
    }
    return {
        trackingType: trackingType,
        isTracked: isTypeTracked(trackingType),
    };
}
function hasValidRumSession(trackingType) {
    return (trackingType === RumTrackingType.NOT_TRACKED ||
        trackingType === RumTrackingType.TRACKED_REPLAY ||
        trackingType === RumTrackingType.TRACKED_LITE);
}
function isTypeTracked(rumSessionType) {
    return rumSessionType === RumTrackingType.TRACKED_LITE || rumSessionType === RumTrackingType.TRACKED_REPLAY;
}
//# sourceMappingURL=rumSession.js.map