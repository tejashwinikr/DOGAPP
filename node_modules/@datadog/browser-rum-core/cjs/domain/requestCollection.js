"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackFetch = exports.trackXhr = exports.startRequestCollection = void 0;
var browser_core_1 = require("@datadog/browser-core");
var lifeCycle_1 = require("./lifeCycle");
var resourceUtils_1 = require("./rumEventsCollection/resource/resourceUtils");
var tracer_1 = require("./tracing/tracer");
var nextRequestIndex = 1;
function startRequestCollection(lifeCycle, configuration) {
    var tracer = tracer_1.startTracer(configuration);
    trackXhr(lifeCycle, configuration, tracer);
    trackFetch(lifeCycle, configuration, tracer);
}
exports.startRequestCollection = startRequestCollection;
function trackXhr(lifeCycle, configuration, tracer) {
    var xhrProxy = browser_core_1.startXhrProxy();
    xhrProxy.beforeSend(function (context, xhr) {
        if (resourceUtils_1.isAllowedRequestUrl(configuration, context.url)) {
            tracer.traceXhr(context, xhr);
            context.requestIndex = getNextRequestIndex();
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_STARTED, {
                requestIndex: context.requestIndex,
            });
        }
    });
    xhrProxy.onRequestComplete(function (context) {
        if (resourceUtils_1.isAllowedRequestUrl(configuration, context.url)) {
            tracer.clearTracingIfNeeded(context);
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_COMPLETED, {
                duration: context.duration,
                method: context.method,
                requestIndex: context.requestIndex,
                responseText: context.responseText,
                spanId: context.spanId,
                startClocks: context.startClocks,
                status: context.status,
                traceId: context.traceId,
                type: browser_core_1.RequestType.XHR,
                url: context.url,
                xhr: context.xhr,
            });
        }
    });
    return xhrProxy;
}
exports.trackXhr = trackXhr;
function trackFetch(lifeCycle, configuration, tracer) {
    var fetchProxy = browser_core_1.startFetchProxy();
    fetchProxy.beforeSend(function (context) {
        if (resourceUtils_1.isAllowedRequestUrl(configuration, context.url)) {
            tracer.traceFetch(context);
            context.requestIndex = getNextRequestIndex();
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_STARTED, {
                requestIndex: context.requestIndex,
            });
        }
    });
    fetchProxy.onRequestComplete(function (context) {
        if (resourceUtils_1.isAllowedRequestUrl(configuration, context.url)) {
            tracer.clearTracingIfNeeded(context);
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_COMPLETED, {
                duration: context.duration,
                method: context.method,
                requestIndex: context.requestIndex,
                responseText: context.responseText,
                responseType: context.responseType,
                spanId: context.spanId,
                startClocks: context.startClocks,
                status: context.status,
                traceId: context.traceId,
                type: browser_core_1.RequestType.FETCH,
                url: context.url,
                response: context.response,
                init: context.init,
                input: context.input,
            });
        }
    });
    return fetchProxy;
}
exports.trackFetch = trackFetch;
function getNextRequestIndex() {
    var result = nextRequestIndex;
    nextRequestIndex += 1;
    return result;
}
//# sourceMappingURL=requestCollection.js.map